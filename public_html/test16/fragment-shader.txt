varying lowp vec4 vColor;

varying lowp float vLength;

// animation type:
// 0: none
// 1: explosion
uniform lowp int uType;

// time param for some animations, from 0 to 1
uniform lowp float uTime;

void main(void) {

  lowp float t = uTime;
  lowp float rt = t * 2.0;

  if (uType == 1) {
    // explosion. Works with blending.
    if (vLength < (1.0 - t) * 0.2) {
      // inner ball
      if (t < 0.5) {
        gl_FragColor = vColor * (2.0 - t * 2.0);
      } else {
        gl_FragColor = vColor * (1.0 - 2.0 * (t - 0.5));
      }
    } else if (rt < vLength * vLength || vLength < rt) {
      discard;
    } else {
      // leading-edge ring light
      gl_FragColor = 3.0 * vColor * (1.0 - rt);
    }

  } else if (uType == 2) {
    // explosion take 2
    if (vLength < (1.0 - t) * 0.2) {
      // inner ball
      if (t < 0.5) {
        gl_FragColor = vColor;
      } else {
        // decrease alpha
        gl_FragColor = vec4(1.0 - t, 1.0 - t, 1.0 - t, 1.0 - t) * vColor * 2.0;
      }
    } else if (rt < vLength * vLength || vLength < rt) {
      discard;
    } else {
      // outer ring
      gl_FragColor = vec4(1.0 - rt, 1.0 - rt, 1.0 - rt, 1.0) * vColor;
    }


  } else if (uType == 3) {
    // explosion #3 LETS DO THIS
    gl_FragColor = vColor * (1.0 - t * t);

  } else {
    // normal shading
    gl_FragColor = vColor;
  }
}
