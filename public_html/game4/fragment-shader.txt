// Special rendering type:
// 0: none
// 1: circle cut-off
uniform lowp int uType;
uniform lowp float uTime;

uniform lowp int uCircleCount; // 1 to 8
uniform lowp vec3 uCircles[8];

varying lowp vec4 vColor;
varying highp vec2 vPosReal;
varying highp vec2 vPosWarped;

uniform lowp int uTexture;

int TEXTURE_NONE = 0;
int TEXTURE_WALL = 1;

void main(void) {
  if (uType == 0) {
    gl_FragColor = vColor;
  } else if (uType == 1) {
    lowp float minDist = 1.0;
    for (int i = 0; i < 8; i++) {
      if (i < uCircleCount) {
        lowp vec3 circle = uCircles[i];
        lowp vec2 circlePos = circle.xy;
        lowp float circleRad = circle.z;
        minDist = min(minDist, distance(vPosWarped, circlePos) / circleRad);
      }
    }
    if (minDist < 0.87) {
      gl_FragColor = vColor;
    } else if (minDist < 1.0) {
      gl_FragColor = vColor * 0.6;
    } else {
      discard;
    }
  }

  if (uTexture == TEXTURE_WALL) {
    lowp float s = 2.5;
    lowp vec2 c = vec2(
        floor((vPosReal.x) / s + 0.5) * s,
        floor((vPosReal.y) / s + 0.5) * s);
    lowp float n = fract(sin(dot(c, vec2(123.987, 973.123))) * 9754.312);

    lowp float density = 1.1;
    lowp float brightness = 0.05;
    lowp float merp = smoothstep(0.0, 1.0, abs(n / density - 0.5) * 2.0) * brightness;
    gl_FragColor.y += brightness - merp;
    gl_FragColor.z += brightness - merp;
  }
}
