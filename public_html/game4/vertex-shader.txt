uniform mat4 uViewMatrix;
uniform mat4 uModelMatrix;
uniform mat4 uModelMatrix2;
uniform vec4 uModelColor;

uniform int uWarpType[8];
uniform vec4 uWarpData[8];

attribute vec4 aVertexPosition;
attribute vec4 aVertexColor;
attribute lowp float aVertexGroup;

varying lowp vec4 vColor;
varying lowp vec2 vPos;

void main(void) {
  if (aVertexGroup == 0.0) {
    gl_Position = aVertexPosition * uModelMatrix;
    vPos = (aVertexPosition * uModelMatrix).xy;
  } else {
    gl_Position = aVertexPosition * uModelMatrix2;
    vPos = (aVertexPosition * uModelMatrix2).xy;
  }

  vec2 distort = vec2(0, 0);

  for (int i = 0; i < 8; i++) {
    int warpType = uWarpType[i];
    vec4 warpData = uWarpData[i];
    vec2 warpPos = warpData.xy;

    if (warpType == 1) {
      // repel
      float vertDist = distance(gl_Position.xy, warpPos);
      float warpRad = warpData[2];
      if (vertDist <= warpRad && vertDist > 0.0) {
        float strength = warpData[3];
        float repelMagnitude = max(-1.0, (warpRad - vertDist) * strength / vertDist);
        distort += (gl_Position.xy - warpPos) * repelMagnitude;
      }

    } else if (warpType == 2) {
      // quantize
      float vertDist = distance(gl_Position.xy, warpPos);
      float warpRad = warpData[2];
      if (vertDist <= warpRad && vertDist > 0.0) {
        float chunk = warpData[3];
        distort += floor((gl_Position.xy - warpPos) * chunk + vec2(0.5, 0.5)) / chunk - gl_Position.xy + warpPos;
      }

    } else if (warpType == 3) {
      // flower
      float vertDist = distance(gl_Position.xy, warpPos);
      vec2 tip = vec2(warpData[2], warpData[3]);
      float warpRad = length(tip);
      if (vertDist <= warpRad && vertDist > 0.0) {
        float angle = atan(tip.y, tip.x) - atan(warpPos.y - gl_Position.y, warpPos.x - gl_Position.x);
        vec2 unit = (gl_Position.xy - warpPos)/warpRad;
        distort += 0.5 * warpRad * unit * (0.5 + (0.5 - vertDist/warpRad)) * sin(angle*7.0);
      }

    } else if (warpType == 4) {
      // invert circle
      float circleSize = warpData[2];
      float vertDistFrac = distance(gl_Position.xy, warpPos) / circleSize;
      vec2 relPos = gl_Position.xy - warpPos;
      if (vertDistFrac > 0.0) {
        vec2 newRelPos = relPos / (vertDistFrac * vertDistFrac);
        distort += newRelPos - relPos;
      }
    }
  }
  gl_Position.xy += distort;
  gl_Position *= uViewMatrix;

  vPos.xy += distort;

  vColor = aVertexColor * uModelColor;
}
