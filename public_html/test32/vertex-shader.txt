uniform mat4 uViewMatrix;
uniform mat4 uModelMatrix;
uniform vec4 uModelColor;

uniform int uWarpType[8];
uniform vec4 uWarpData[8];

attribute vec4 aVertexPosition;
attribute vec4 aVertexColor;

varying lowp vec4 vColor;

void main(void) {
  gl_Position = aVertexPosition * uModelMatrix;
  vec2 distort = vec2(0, 0);

  for (int i = 0; i < 8; i++) {
    int warpType = uWarpType[i];
    vec4 warpData = uWarpData[i];
    vec2 warpPos = warpData.xy;

    if (warpType == 1) {
      // repel
      float vertDist = distance(gl_Position.xy, warpPos);
      float warpRad = warpData[2];
      if (vertDist <= warpRad && vertDist > 0.0) {
        float strength = warpData[3];
        distort += (gl_Position.xy - warpPos)/vertDist * (warpRad - vertDist) * strength;
      }

    } else if (warpType == 2) {
      // quantize
      float vertDist = distance(gl_Position.xy, warpPos);
      float warpRad = warpData[2];
      if (vertDist <= warpRad && vertDist > 0.0) {
        float chunk = warpData[3];
        distort += floor(gl_Position.xy * chunk + vec2(0.5, 0.5)) / chunk - gl_Position.xy;
      }

    } else if (warpType == 3) {
      // flower
      float vertDist = distance(gl_Position.xy, warpPos);
      vec2 tip = vec2(warpData[2], warpData[3]);
      float warpRad = length(tip);
      if (vertDist <= warpRad && vertDist > 0.0) {
        float angle = atan(tip.y, tip.x) - atan(warpPos.y - gl_Position.y, warpPos.x - gl_Position.x);
        vec2 unit = (gl_Position.xy - warpPos)/warpRad;
        distort += unit * (0.5 + (0.5 - vertDist/warpRad)) * sin(angle*7.0);
      }
    }
  }
  gl_Position.xy += distort;
  gl_Position *= uViewMatrix;

  vColor = aVertexColor * uModelColor;
}
