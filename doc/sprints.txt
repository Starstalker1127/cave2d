cave2d.com/<game path>/edit is the main editing UI, with adventures, levels, level editor, etc.
* Like Vorp, this is a single-page app with a hash-fragment query string.
  That means that the level editor's unzoomable meta tags need to be added/removed dynamically.
v Page baseclass
  v enterDoc
  v exitDoc
v AdventureListPage: If no adventure is found, clear the query and show the adventure list.
  v look in storage for paths like [<game>, "adventures", <adventure name>, ...]
  v show 'em in a list
  v "create" button for the whole list
  v for each row,
    v copy
    v rename
    v delete
    v hyperlink to enter adventure's levelList. URL: game2/edit/#adventure=<name>
v App class
  v hash fragment query parser
  v listen to hash fragment URL changes
  v ref to page now showing, to call exitDoc on it, then enter the new one.
v LevelListPage: If adventure is found but no level, show that adventure's level list.
  v link back to adventure list
v LevelEditorPage: If adventure and level are found, show that level's editor.
  * analagous to test38/main.js's starting point
  v update HTML
    v write canvas
    v write pause menu div
    v make Pages update body CSS
    v update and restore head meta viewport content
  v update pause menu
    v name of game, hyperlinked
    v name of adventure, hyperlinked
    v name of level
  v preload shader text files
    v make main.js pre-load shaders in a TextLoader
    v LEP either uses the shaders immediately or waits for a single callback.
    v copy RendererLoader code into LEP to create WebGL context.
  v create WebGL editor "screen"
  v save & load v1
    v load in enterDocument? Or when shaders are ready?
      v inject starting JSON into PlayScreen
      v if no JSON file, creation starts with mostly-empty default world
    v save on exitDocument
    v save on onBeforeUnload?
    x save occasionally
    v no sharable URL form now because that messes up the URL scheme. Add Import and Export later.
  v In mobile level editor, stop single-tap-button events from teleporting cursor!
  x exitDocument
    v stop listening
    x tear down WebGL, if it is set up, if nuking canvas doesn't do it already.

Export
I still like the idea of sharing a level by URL, but I also like sharing an adventure by JSON
/<game path>/export#, #adventure=xxx, and #adventure=xxx&level=YYY exports the relevant data to text which can be
copy/pasted into /game2/ file.
/<game path> is for playing the exported game.
v ExportPage
v Export link on each adventure.


Sprite configs...
A single spirit class, plus body, may have variations that result in multiple... what? Characters? Parts? Items?
* To distinguish them in the menu they should have different "icon" models, even if it's just color or size or minor
  variation.
* Serializing includes typeNum. Keep it in the spirit API.
* When deserializing, there should be a straight lookup from spiritType to (uniform) Spirit ctor. But it's many-to-one!
* Instances draw and make noise with Spirit code
...
* I guess a Spirit should be able to create a Model, using params.
* And a Spirit should be able to create a Stamp too, using params.
  * But cache 'em w PlayScreen "StampCache".
  * Cache key is all params that went into creating 'em.
* Menu configuration means...
   * creating Spirits with params and getting icon Models from 'em. OK.
   * having factory code for each menu item, to generate default values for spirit, body, etc
     to insert into world at x, y, d

SpiritConfig - one per spirit-type per game, concentrating the scattered Spirit stuff,
to help make coding a new spirit easier.
v Create a config that ties together the misc. sprite junk
  v type number (for serialization and deserialization) and also primary key for this game
  v stamp (just one? That'll change.) for rendering.
  v optional menu stuff. Maybe a list of these?
    v item name (why different from type number? Use type number?)
    v group
    v rank
    v model, for generating menu stamp
    v addFromMenuFactory
      v sets up default body
      v calls spirit constructor
      v overrides constructor biz maybe.
      v uses stamp
  v whatevs is needed for playscreen's fromJson()
    v deserializationFactory?
      v deserializes body
      v calls spirit constructor
      deserializes spirit state
      v uses stamp
  v menu creation
v Create one big map from spiritType to SpiritConfig
v Read from the SpiritConfigMap in all the right places in PlayScreen
v convert existing spirits
  v AntSpirit
  v PlayerSpirit

Modes - Edit, Test, Play
v rename PlayScreen to EditScreen
v change EditScreen "pause" button to "settings" or something
v Make TestScreen too
  v code nest
  v Button to get to it from Edit screen
  v css
  v camera follows average player-spirit position.
  v left-arrow button in TestScreen to navigate back to edit
v in edit mode,
  * collision interactions are limited to bouncing. No collecting, exposions, unlocking, exiting, etc.
  * Spirits may render differently, to help the editor position and orient them.
  * Leave the door open for spirits that help you make a level - diggers, sculptors, etc.
  v spirits don't move or create on their own.
  x Friction is applied uniformly by the editor?
v in test & play mode
  v player controls work
  v self-driving ant

super basic Player
Do I need a real Player object? It would get...
* some fraction of the screen for assigning a trackball and some buttons. 1/2, 1/4...
Then the player would own controls, and the screen would own the player? I guess?
And Player would have a collection of PlayerSpirits or whatevs to send control data to?
v PlayerSpirit shell
v timeout cycle
  v friction
v "Player" class, corresponds to a human player and their gameplay state
  v Controls passed in as state, mutable.
  v handleInput() reads controllers, dumbs down for Spirit and passes along to spirits, resets controls.
  v API for PlayerSpirit or other world entities added/removed by Screen, mutable state.
v TestScreen manages list of Players (just one for now), adds and removes, calls
  * start by adding player one's spirits and controls. Worry about death, respawn, and player 2+ later.
  v handleInput
    v call Player.handlInput
    v rewrite PlayerSpirit.handleInput a little
    v call at beginning of each RAF, before drawing or physics
      (BaseScreen already has handleInput() call, yay!
  v controls & layout hardcoded by screen for each # of players
    v one-player trackball
      v owned by screen, but reference held by player
        v on the world layer
        x screen does listen and unlisten
    v one-player buttons
      v two per player
      v on the HUD layer
      x listen and unlisten

Screen refactor
* Before adding PlayScreen and stuff, eliminate some redundancy.
v Pull common Test/Edit/Play stuff up to BaseScreen.
v move BaseScreen up to main dir, out of "edit".

PlayScreen
v make and export a few levels
v play uses big exported FileTree JSON file.
  v PlayPage loads adventure data via XHR
  v use as file tree
  v expose as adventure data
  v order the levels
v start with camera at avg of players, not wherever the editor left it.
v initialize the first level.
v in-game pause menu
  v start paused
  v resume, fullscreen
  v center
  v branding
  v change "resume" to "play"
  x clicking off of menu resumes? meh.
  v double-tap in the middle of the screen activates pause menu
    v sense mouse/touch down near middle of screen, hud layer, but do not consume event
    v onTap, when pauseTipEnd < now, pause is unexcited. Start excitement timer
    v Show pause button grow and then shrink through excitement arc
    v Tapping again during excitement
      v causes excitement to end
      v activate paused mode
    v unpausing causes fading mid-screen
  v user-test pause button. FAILED. even though it's hella fun. Oh well?

Pause button v3
v on play screen, put button near other buttons, just a regular widget I guess. :-/
  (wow that seemed like a lot of work)

Exit
v ExitSpirit
  v stamp looks like a square
    * yes that's lame and yes I feel bad
v SpiritConfig
v add to menu
v add to levels
v export levels
v in play mode, player hitting exit triggers...
  x transition screen? Some kinda pause feels right. But maybe later.
  v start next level
  v victory if there's no next level.
    v Gonna need a victory screen I guesssssss
v in test mode, uh... don't?
v friction in edit mode
  x add an onPulse like onTimeout, but free for everyone? Good time for friction, scans, etc.
v zero vel in play mode

Simply Stunning
players and gnomes can be stunned by accel (not force!) of collisions, even microcollisions
v track collision accel, "bang", over time
  v if we know the val at a time, then w a linear decay we can get at new time and mutate. Like paths.
    v setBangAtTime(v, t)
    v getBangAtTime(t)
    v floor is zero
    v any ceiling? Don't want perma-banged spirits just laying around, do we?
    v decay rate depends on spirit
    x make additional bang be the *square* of the collision accel? Will miro-collisions add up?
v stun is a function of bang
v stun level decreases voluntary control, may prevent actions when above a certain level.

polish for no reason
v zoom map in much more?
v tune stunning way the hell down

Scale ant-count by decreasing cost of off-screen ants
v don't draw them
v give them less frequent timeouts the further from the screen they are
  v with some max limit so they never look dead.
v bring them to a halt if their vel is very low
v if they're past a certain dist, just glide to a halt w/o rayscans.

v Victory v1

Player fire 1
v "X" button triggers it
  v throttle down to some limited frequency, w timeouts
v screen fire()
  v muzzle flash splash
  v create bullet
    v bullet spirit
      v temp model
      v drawing
      v splash trail?
        v prototype spark one using onDraw
        v better smarter Trail class
          v circ-buff of TrailSegment
          v TrailSegment with startTime startPos, vel
          v Trail itself has endTime that is often Infinity
        v use Trail in BulletSpirit
          v update Trail when trajectory changes
          v end Trail when bullet dies
          v don't delete BulletSpirit until it is done drawing the fading trail!
    v "pew" noise - do noises soon but later
v bullet behavior
  v vanish when hitting stuff or maybe bounce at low hit angles - start to add impact damage sys?
    v wall damage
      v erase some wall
      v noise
      v splash
    v poof when bouncing wall, based on mag?
  v damages/destroys enemies
    v enemy explosions (splash)

iOS sound fix
v start playing sounds on "Play"

Player Health and Death
v player has health value
v lose health when hit by enemy
v die when health hits 0
  v explosion
  v delay
  v respawn (where you were?)
  v sound

cleanup
v delete grunt
v Model cleanup
  v pull common models out of screens, into "model.js"
  v Tube and Cylinder
    v Separate tube and cylinder models
    v tube for some explosions
    v cylinder for bullets, aim
v Draw aim, don't splash it
v Make aim more responsive
  v no keyboard hysteresis
  v less touch hysteresis
v clean up hit groups
  v wall
  v neutral
  v player
  v player fire
  v enemy
  v enemy fire
  v explodey_bits - only hit immovable, just for looks
x rename "bullet" to be "playerBullet"
v Make a Game2Spirit base class and pull common code, like getBodyPos() and now().

Add to play screen pause menu
v restart level
x restart game
x link to cave2d.com main page

Player tweaks
v face!
  v move to face aim
v shift to increase accel for keyboard players
  v move it up to KeyTrackball
- add concept of weapons
  * weapons are classes reusable by player and enemies? kinda rogue-like in a way. I like the modularity.
    It also hints at an ability to play other critters, given a uniform control interface for their abilities
    Aaanyhoo...
  v api:
    v handleInput(aimVec, triggerDown)
    x isReady?
  v player starting weapon is shotgun - instant, short range, a little bounce, 5x fire, periodic, continuous re-aim
  - player other weapon is laser - long range, no bounce, 5x speed, hella fast, aim is locked. takes a sec to warm up?
  - missle launcher is a bonus weapon
- second *button* switches weapons.
- Remove stun logic from player? Tweak it? Something's wrong because stunning is easy in warp only...

Better placeholder levels
- Level 1 - Name of the game, basic movement play, super easy combat
- Level 2 - Digging, basic combat
- Level 3 - More arena combat, some halls
- Level 4 - hallway combat, but mostly one-way
- level 5 - multi-way hall/grid combat
- level 6 - combat donut, multi-layer digging/fighting to get to exit


more cleaning
- fix editor pause menu CSS

Sound 2.0
Give each sound effect a static generator object, injected into basescreen.
-

Props
- starting base
- middle base? Needs to decide death policy
  - easy: drop powerups, respawn where you were
  - normal: reset level
  - hard: game over
- exit, naturally
- bomb
- springball
- block_square
- block_round

Enemies
bugs
- rename "ant" to "bug"
- bug_small - today's 2 health bug, slightly smaller than player
- bug_med - 8 health
- bug_large - 32 health?? Dangerous in open big open areas, but can't fit through harrow halls... give it a grabber ray?
- make them lunge again, with warm-up and cooldown, and *only* dangerous when they do, so sidestepping is effective defense.
gunners
- monogunner (pop pop) maintains dist
  - bullet, long range, medium speed
- shotgunner (blammo) gets close, shoots, runs away, repeat
  - bullet, short range? Different bullet?
- chaingunner (ratatatatatatatatatat) aim sweeps towards player
  - fast long-range bullet and lots of them, but aim sweep isn't super fast
- missiler (fwoosh!)
  - missile
turrets
- laser turret
- multi-missile turret
- double-chaingun turret, sweeps in opposite directions??
weirdos
- exploders pursue slowly, burst when close or when shot.
- drillers are protected in the drill-front, vuln in the butt. Rush past player, cuts through walls
- miner drops mines and runs away
  - mine explodes when shot or on contact
- centipede body follows head. When head is shot, next becomes head. When body is shot, turns to wall, next turns to head.
- Floating Eye is slow and weak but it fast-lasers you if you get into line of sight.
- Eternal Orb of Simplicity bounces everywhere, no senses, no timeouts, no friction, 100 health, kills player on contact.
- Temporary Orb of Destruction awakens, follows you, avoids walls a little but eats them on contact,
  eats everything it touches (except base and exits and other destruct-orbs)
  rayscans and pulls everything near it into itself, but shrinks to nothing after a while.
- Asteroids. Split into two smallers when shot, go through walls, only hit player, player bullets, orb-OD. Wrap-around teleport. Why not.

Powerups
- double fire rate
- double fire damage
- rear-guard
- driller
- invincibility & ramming (except OOD)
- timewarp
- missiles
- one-hit shield
- Pows can be hidden in walls
- If touching an enemy, then the enemy holds it? That would be nice, but maybe no.

- Add and remove player 2?? Or bail on that? I DO want two players...
  - Player menu inside "pause" popup
    - row for existing players (room for all kinds of settings later)
      - rename
      - drop (except for the last player remaining)
    - add new

Orientation
- Bodies have orientation
- Cursor force can rotate bodies? Or cursor motion changes body orientation anyhow.
- editor

SplashConfig
* similar to SpiritConfig, except that there's no menu item for splashes

Measure actual framerate; don't assume it's 60fps.

Auto-save game in progress to localhost?

TestScreen time controls
* centered on top. These are totally unneeded but probaby would be awesome.
- pause
- play 1/4 speed
- play regular speed
- play 4x speed? or faster?
- super speed

Custom dialogs:
- prompt
- confirm

Attribute editing?
- Spirits can expose a type+key: value form
- Mode button opens form editor

Test XX: Undo and Redo
- retain last N JSON serializations in RAM or wherevs.
- Create new ones using one-token-bucket throttle right before mutations, w 1/sec(realtime) restore rate.
- Always save the just-after mutation camera and cursor pos, to bring the area into focus before undoing.
  Keep that as a separate kind of undo record, since it's so tiny and easy to restore.
- Button for creating an undo record just because time went by. Snapshot?

Zoomable?
- two-touch pinch/unpinch
- mouse onscroll, like Vorp
- keys, maybe "[" and "]" or "," and "."
- Touching the zoom indicator buttons zooms to that level Maybe four: close, medium, wide, far.

Lifting?
- If cursor distance is too great for too long (low-pass average dist?), "lift" the object
- Lifted objects are treated as though they are uniform density, normal MOI, with no physics or collisions.
- Can lifted objects be sensed with rayscans? No, they're transferred to the "none" group.
- Only one object can be lifted at a time (worry about multi-user in the distant future).
- Lifting ends when you release the object.
* When time is frozen (upcoming feature), all object-movement is by lifting, because there is no time for physics.
* When adding objects, they are lifted as they leave the menu.
