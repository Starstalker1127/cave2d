Drop & Throw
v add kick+move = throw (implement as insta-kick)
v keep kick+stillness = drop

Make enemy development easier with some library biz.
And make inanimate objects a lot cheaper too!
v Wake and Sleep: hooks around timeouts, distance limits, friction, nearly-drawn, low-power, bump-wake, other wake
  v document Ant spirit efficiency biz
  v make it re-usable for spirit
    v plan it!
    v pull it up
  v use in spirits
    v ants
    v all inanimates
      v performance savings confirmed
    v fix editor to auto-wake anything that's dragged
    v fix anybody missing passive timeout loop
    v make body wake spirit when vel changes to non-zero
      v like change listener, add optional link to wakable spirit!!
        v undo maybeWake hacks
          v body itself
          v player tractor
          v editor
    v centipede is the trickiest! If any part is active then all parts should be active.
      v just make it not broken, using active loop
        v play
        v edit
      v going to sleep
        v awake head checks whole body.
          v each body part must have canSleep(), including head.
        v If all may rest then head tells them to all become inactive.
      v waking up
        v any inactive part that gets drawn or close to it signals all other parts to wake.
        v they all become active immediately so no more signals happen until next sleep
      v joining
        v an active centipede joining an inactive one causes it to become active

v Fix Chrome audio on laptops. https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio
  iOS touch hack, but for keyboard and mouse too?
  resume() if audio context is not running
  v game4
  v everywhere else!

Game 5 skeleton
v code nest
v remove unused spirits
v remove tractorbeam
  v from playerspirit
  v from controls
  v from splashes
  v from sounds

x Fix pointerlock everywhere.
  No I messed it up, and decided it wasn't worthwhile. It's good enough.

Player movement
x use mouse trackball
x limit max accel, like game2
x stun when hitting things hard, to prevent super-strong pushing. Lowers max accel more.
v floaty garbage because I love it!!

v base weapon responsibilities
  v setWielder(spiritId) to read team? Or just setTeam? Changing spirits releases trigger I guess
  v trigger API: down, up. Call down and then up immediately for one-time shot.
  v enforce rate-of-fire. Remember last fire time.
  v read owner body's pos, vel, angpos, angvel when firing
  v manage sounds, graphics, and actual fire effect such as creating projectiles
  x maybe draw, also based on owner body
  x setRateMultiplier(something around 1) nextFireTime = lastFireTime + fireDelay / rateMultiplier
  x expose properties like shotSpeed, shotSpread, shotRange, inaccuracy, splashRadius, for general aiming/firing alg.

v laser
  v player
  v ants

- health framework
  - damage is floating point
  - health regenerates from fraction to whole number
  - healing jumps you up by exactly 1
This solves some problems:
1) Not all weapons have to be all-or-nothing damage, (though maybe that would still be a good forced simplification)
2) There can still be specific health-based modes
3) Folks aren't walking around within a hair's-breadth of dying.
4) Player is encouraged to concentrate attacks on an enemy long enough to drop it at least one full HP.
5) health can still be displayed with integer chunks

- leaf weapon classes
  v laser - long, straight, no bounce, frequent
  - shotgun - short wide, a bit bouncy, infrequent
  - rogue gun - medium, narrowish, very bouncy, low damage
  - machine gun - long, straightish, little bounce, frequent
  - rocket - dumb, infrequent, explosive
  - magic missile - seeking, avoids walls. Infrequent!
  - saw. Really short, constant, cut through walls.
- hosts
  v player
  - turret
  - tank
  - grunt
  - flier

Dumb arcade enemies:
- fire projectiles that harm player
  - for now harm = kill (but I really liked fracas2's 3 stages of health: temp superpowered, regular, and near-death bullet-time)
- dumb movement states
  - wander
    - factor out Ant and Centipede Wall avoidance
      - encapsulate behavior class with state and params
      - search for wall ahead
      - side-sweep to find clear path, early bail. That's the main reusable part.
  - chase player (when unobstructed by huge masses)
  - follow invisible directional arrows?
  - follow walls
  - stationary
- some are dangerous to touch
  - spiker
  - floating mines
- melee weapons, like spiker (instant, rayscan) or
- some have an invincibility phase, especially turrets.
  - Pick a color for invincibility
- moods
  - safe until attacked
  - hostile when hungry
  - flee when hurt
  - attraction - follow at respectful dist
  - alliance
    - hang around X
    - attack those who are hostile towards X
- mood-inducing artifacts and weapons
  - fear gas
  - anger gas
  - fear gaze
  - attraction gaze!
- physics-y enemies
  - asteroids float through walls
  - bouncy balls bounce and split
  - statues teleport using rayscans

- powerup framework
  - durable one-use shield
  - temp invincibility
  - slower enemies & enemy bullets
  - weapon magnet
  - periodic time-freeze (no firing!)

Fun props:
- bumper
- blipper
- portal
- repulsor cannon

- target-intercept behavior, like tractor beam
  - search for target
    - random search (or structured sweep?)
    - compare candidate target with current target if any.
  - target chosen
    - scan to target
    - move to intercept
      - choose along vector of where target is (0) and where intercept point is (1)
        - pull out intercept code for Avoidance
      - adjust vel to target vel or whatever
- target-avoidance
  - same as intercept, but adjust vel away from target vel?
- Also do diff between "hit target hard" and "come to rest at dist D from target", mjolnir-style

Impl concepts:
- desired distance
  - negative infinity: ram target hard
  - 0: rest just barelytouching target
  - small num: follow target w/o touching
  - infinity: get away from the target!
- lead/follow
  - try to get to where target will be in f(positions and vels) time
    - zero:  dumbly go to where target is now.
    - positive but proportional to... dist?: lead the target
    - if negative, try to get to where target would have come from - go behind target

- stun effect (timer mostly)
- flying/knock-back that sends lower traction to 0 for a time (until it hits something?). Often combined with stun.
- ice effect - shiny crystal
- slime effect - smooth lumps
- damage-flashes for non-fatal damage

- make a bullet that does the same

Awesome weapons and effects:
- Mjolnir
  - auto-hits enemies when swung around, with heavy knockback
  - When activated, charges up,
    and when released, flies and seeks one enemy, then returns (gently) to player for grabbing
  - When dropped, is immovable?
- Waymaker
  - Smashes anything, digs a tunnel
- Gale
  - medium-length wind force repels all enemies (and objects)
- Wide-area stun




Most super-basic:
* gun-acting robot enemy that is also a weapon
* more of that

Robot where you can Rotate through modes via activation?
- deactivate and float
- follow me passively
- active, maintain position & direction
- active, maintain position but do rotational scan
- come with me and defend me - wingman
- active, patrol local area
- active, scout ahead, then return to me

So:
- basic shooter
- slimer
- shotgunner
- machine-gun
- grenade
- snowball
- rogue
- flame-thrower
- rocket
- laser burst
- seeker missile
- sustained laser


Proper weapons, mostly melee or thrown
- mace
- star(s)
- glaive

Plants with interesting qualities.
- bomb
- mine
- slime
- gas
- frost
- bramble?
- decoy

Robots with more powerful weapons, that you can grab and use!

Monsters

Breath weapons
- Gas and spark monster makes an easy weapon.
- Slime barfer
- ice breath
- flame breath
- water spitter
Robots
* turrets of course
* walkers
* sometimes explode!
- shielders
- repulsors
- blasters (primitive)
- rail-gun
- missiles
- repair drones
Plants (grenades)
- bomb fruit
- gas fruit
- slime fruit
- bramble fruit?
Pure tools
- lance
- drill
- glaive
- mine
- grenade

Different movement characteristics
- forward speed
- sidestep speed
- backward speed
- turning speed


melee

throw
gas - hazard only for now, flamable later. Gas immunity
slime - makes it easy to direct enemies into gas
fire
ice


- Glaive! Activated, it zooms away, comes back, but is easy-ish to catch again. But it can kill you...

- Basic shooter
  - wanders, fires slow bullet occasionally at player
- shotgunner
- machine gunner
- bomb thrower (also bombs can be caught and thrown!)
- sniper

- contact mines
  - may be grabbed and kicked safely
  - touching makes them boom, physical shrapnel

behaviors:
- go forward
- scan to avoid walls
- hug wall
- wall skating?
- scan for player(s)
- fire a weapon at a target

- stationary turret
  - scan for players
  - fire at them

- patrolling turret
  - slowly move, avoiding walls

- The Living Statue
  - Frozen and spike-shielded when player is in view
  -

- sleepy chaser
  - sleep when far from players
  - scan towards player when plr is close enough, to maybe wake up
    - ordered scan, closest player first
  - wake on contact or when player is visible
  - chase to where player was last visible
  - last-seen timer
  - new good wall avoiding biz too

- fast tunnel racer! finally.
  - scans towards players
  - if plr seen, fire at player and run away
  - hard to hit/kill

- juggernaut
  - slow wanderer
  - when player seen, shields and charges at player, until contact with infinite mass or max time.

- shotgun

v rapid-fire
  - change to laser?
- centipede

- wall-hugger missile
- tunnel lurker

- rail gun (penetrates, accurate, laser scope)
- summoner
- turret

- grenade launcher (explosive area of effect)
- sniper

- rocket launcher

- ice beam

- slime splasher, lowers traction a lot


Better deaths/explosions
- two-part models with spiky bits
* Splashy everything like I have today
* Physics-y everything like N++. Nice if you can afford it! Mostly only hits walls
* shader tricks
  * fat fragment shader, simply geometry (circle?)
  * fancy vertex shader with numbered objects and parameterized explosions

Idea: animate as many off-screen enemies as we can given our physics budget left over from on-screen ones.

