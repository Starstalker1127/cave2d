Code Refactoring
v WorldJsoner for s27n
  v write class
  v replace game2 code
  v replace game3 code
v TileGrid consolidation
  v move tile drawing to TileGrid
  x move terrain pill mutation to TileGrid (already done!)
v remove obsolete BaseScreen.flushTerrain func
v Prepare: prepend "GameX" and "TestX" to base, play, test, and edit screens for
  v t41
  v g3
  v t40
  v g2
v WorldScreen is the base of BaseScreen: Part 1
  v Create common WorldScreen class, borrowing from BaseScreen
    v getSpiritConfigs()
    v getHitGroups()
    v getWallGroup()
    v getHitPairs()
    v clock()
    v draw()
    v onHitEvent()
    v keep stats but omit statmons
  v Extend it in the XxxBaseScreen classes to eliminate a lot of code
    v t41
      * hm, too much editor code remains...
v Move undo, redo, and pause from Test41EditScreen to Editor, but make undo/redo optional
  v t41
  v fix other Editor users by removing their Pause code
    v t40
    v t39
    v t38
    v t37
    v g2
    v g3
v Make all Editor callers supply spiritConfigs, and make spiritConfigs mandatory
  v t40
  v t39
  x t38 deleted!
  v t37 (empty map)
  v g2
  v g3
v WorldScreen is the base of BaseScreen: Part 2
  * delete screen's addItem()
  v t40
  v g2: This is the big one.
  x g3? Do I have it in me? g2 was a lot of work. leave g3 for now.
v Add Undo to game editors
  v g2
  x g3? meh.
v Remember undo/redo when switching between edit and test.
  * don't overdo it. Just make it so that a one-window users can make a change, test, untest, and undo.
  v when saving level to json
    v put a random changestack token into the JSON
    v store the changestack in app RAM using that token
      * survives level renames
      * never gives the wrong changestack to an edit screen
      * SessionStorage requires JSONing and that seems overkill
  v when loading from json in edit mode
    v get the token from JSON
    v look for the changestack JSON
    v If it exists, initialize the world's ChangeStack using the result
v BUG: editor, add ant, remove ant, test, untest, undo (to re-add ant), test. Ant can be seen but never moves!
  * also works w player. Clear that timeout loop is broken!
  * pretty definitely to do with timeouts...
v Pages: Reduce redundant code
  v Make an app-level ScreenPage baseclass for (game2) pages with screens
  v Extend it:
    v Play
    v Edit
    v Test

Better undo/redo icons
v square-turn arrows are OK, you clunky so-and-so.

Game4: Multiplayer Tractorbeam 1
* up to four touch players
* Up to three keyboard players: wasd, ijkl, arrows
* Mouse control with pointerlock and keys?
* Gamepad controls if possible
v game4 nest, copy of game2
v spirits
  v make ants use proper rotation
    v use body rotation to store self
    v actually respond to torque and use angular momentum correctly
  x make player use proper rotation too // nah, gonna nuke and restart player spirit code anyhow.
v undo bug! Can't redo sometimes.
  It was because I wasn't stopping ant angular velocity, and also wasn't stopping ExitSpirit velocity because bugs.
  To debug I added the line graphs to game4, and I'll leave 'em in.

Test 42: Multiplayer Controls
v nest
v PlayerControls (NOT in charge of joining game)
  v stick, triggers
  v spirit setter
  v calls spirit's handleInput
v PlayerSlot
  v join trigger
    v multitrigger of KeyTriggers for keyboard slot
    v TriggerWidget for touch slot
  v enable()
    v status disabled --> enabled
    v enable the join triggers
  v join()
    v status enabled --> playing
    v disable the join triggers
    v enable the control triggers
  v leave()
    v status playing --> disabled
    v enable the join triggers
    v disable the control triggers
  v disable()
    v leave() if not already left
    v disable the join triggers
  v test w two keyboard players
v touch players
  v drawHud()
    v join button if waiting
    x b1 and b2 if playing - meh do it later when I really want buttons
v simple pattern-match for collision response because JEEZ.
v PointerLockStick support
v TwoSpeedKeyStick
Join/Drop 3.0:
For touch players, explicit join and drop is good because if other players aren't joining, it's good to give
that touch area to the actual players. So stop dropping players when they die. Make drop explicit somehow...
I'd like each player to have their own menu for changing appearance, adjusting controls, and dropping.
And joining can go back to that little button I used to have for touch.
v bring back little touch join buttons
v pause menu
  v spacebar for keyboard
  v bring middle-of-screen pause back for touch
v ClickPad
  v output is an event: sub to the pub my daime
  v non-touchlike (keyboard)
  v touchlike (touch, pointer lock)
v PlayerSlot takes on more responsibility and generality
  v create ControlMap class, with startListening and stopListening
  v PlayerSlot is a map from name to ControlMap, generic listen/unlisten
  v convert test42 to use new more generic scheme
v structure control names
v give the whole slot to the PlayerSpirit, not just the controls, so the player can do different things based on current state.
  v listen in PlayerSpirit when PLAYING
v improve touchstick startzone
  v add touch starting-spot to player slot
  v create function bound to the set of touch slots and the current slot,
    and returns true if params x, y are closest to the current touch-player's starting spot.
v triggers
  v keys for keyboard
  v two mouse buttons (for mouse) and two keys (trackpad) for pointer lock
  v two on-screen buttons for touch players.
    v stamps
      v circles
      v with numbers in them
    v pairs of cuboid rules
    v in the corner always
v menu triggers
  v keyboard
  v pointerlock
  v touch
v separate "drop" from "die".
  v Make menu button drop the player for now.
  v Dead players auto-respawn after a short timeout.
v aim: each player has an aim line, like game2
  v player spirit vec
  v rendering (steal from game 2)
  v aim is a function of the type of control, the old aim, and the new stick value.
  v keyboard
  v pointer lock
  v touch
v fix touch jitters - it's overcorrecting at high stick displacement sometimes
v try floatier movement
v "slow" button for keyboarders to aim better, instead of turbo.
  v make turbostick a more generic two-speed stick

v Don't let drawing completely block physics. Better to skip frames. This is good.

Uniclock physics optimization? Summary: Not worth it.
I did the math and doing all the acceleration at the same time is up to 2x as efficient in terms of collision count,
among moving objects that are all changing trajectory and potentially colliding with each other.
But that makes the cpu load spiky, so every third frame or so is overloaded, and the rest are underloaded. Plus I lose
a lot of timing flexibility. I guess I don't really mind the individual timing loops. Plus a ton of my
collisions are really rayscans or unmoving walls. Meh.

Test 43: Multiplayer Camera
v code nest
v bigger playable area
v zoom and position camera so everyone's view-circle is on screen. Easy because rectangles...
  v but the old "pretend screen is square" system won't work. This needs independent width and height zoom.
v selective tile draw with multiple players
  v create set of tiles
  v draw 'em
  v actually circular selection
  v do real allocation in test43 circle biz
v distinguish floor from invisible void
v selective spirit draw
  v select world cells that touch view circles
    v make a thing that collects list of world cells overlapping circle, like bitgrid
  v draw stuff in those cells
v control tweaks
  v release touchlike full-turbo when that control is released
    v easy for touch
    v use timing for pointerlock I guess
  v lower top speed
  v increase default zoom
v Smooth the circles with a fragment shader!
x Draw even more stuff near players that are close to each other - a kind of sensor bonus?
  nah it messes with the incentives too much
v fix circle array allocation madness


Test 44: Tractor Beam!
v test nest - from test 43
v buttons lock aim (but it's more fun without it)
v grab part 1
  v seeking: no grip, button 2 down
    v rayscan
    v debugging-spark
  v onGripStart transition
    v remember
      v body
      v location relative to body's orientation
      v grab vector relative to body's orientation too - not just straight at center of mass
  v gripping
    v draw
    v super dumb spring force at first
    v no more scanning until grip released
    v don't draw aim pointer
v kick part 1
  v while gripping, button 1 releases.
v grab part 2
  v damping
  v proper player rotation
    v turnable, moi
    v separate player aim from player body angpos (no-op?) (yup)
    v Draw player body angpos somehow
    v Do rotational accel based on diff between aim and angpos
    v Make plr react to collisions with grip/rotation
  v beam torque
    v factor beam code into separate class
    x call it 4 times, by specifying two logical endpoint locations, two "forward" unit vectors, and two spread distances?
    x forces from points left and right of player center (or player surface?), to points left and right of grab location.
    v some kinda weird two-pin hybrid approach that can't be stable when bent back. It works.
  x squeezing?
  v break grip if rayscan-clear check hits anything except target for more than N checks
v loose low-friction objects that aren't ants, to play with
  v light balls
  v massive rocks
v No aim while holding
  v no aim indicator
  v no towards-aim accel
v easier grabbing
  v multiple scans, outward from center, in a fan pattern
  x separate last-ditch wall-grab scan, short and straight ahead? Otherwise don't grab a wall.
  v simple splash suitable for debugging and looking kinda cool.
v kick part 2
  v track kickHoldStart (infinity by default), TIME_TO_MAX_KICK, 0-1 kickFrac = Math.min(now - kickHoldStart, timeToMaxKick)
  v while holding, kick
    v rev up kick with long-hold
      v graphics
    v kick throws the target obj
  x when not holding
    x rev up kick with long-hold
    x kick does a little force-jab

Test45: Tractor Beam 2
v nest
v simplify keyboard controls
  v remove "turbo" button
  v unify top speeds. Not too fast! current keyboard top speed seems OK now.
v change kick to release & continuous repel
v make stiff-grip more obvious (and effective)
v Unified simplified player action tracking
  v PlayerSpirit fields
    v beamMode:
      v OFF
      v KICK
      v USE
      v GRAB
    v beamState:
      v FREE (off, seeking, repelling, seeking-to-trigger)
      v GRIPPING (floppy, stiff, using)
      v EJECTING: player is kicking a gripped target obj.
        * Instant release but still track the target and check for breaks
        * if plr holds kick for a bit more then power up a kick
        * actually do kick when player releases kick button.
        * max time until involuntary release. short though.
      v BROKEN
        * target out of range or beam interrupted for too long
        * from gripping or ejecting!
        * player needs to release all buttons, or wait for (short) timeout, before any buttons work again.
    v start time of current state
      * used for calcs and graphics
      * used as token in world timeouts, to make sure the timeout is still valid.
v ejecting
  v remember start-time
  v remember target
  v keep scanning for break
  v floppy force
  v time between kick-down and kick-up dictates ejection strength
    v none
    v light eject
    v medium eject
    v stong eject - auto fires at end of window
    v times are pretty short, like 100ms each
  v grip-down will cancel ejection and switch to trigger! That's new.
v broken
  v remember start-time
  v player can cancel timeout by releasing all keys
  v when timeout is done then keys work again
v repelling
  v a lengthening, narrowing beam, not long-lived. Timing and aim matter.
  x better physics code. Don't re-use dampened spring function.

Test45 redo: tractor beams again
Nigh-perfect acceleration and damping?
* attractor-bullet stream
* repulsor-bullet shotgun
* Math thingy that takes pos diff, vel diff, max accel, and landing softness(?)
  and returns the right accel, from -maxA to maxA, such that
  you'd never overshoot or oscillate,
  and it doesn't bang-bang (alternate between maxA and -maxA) - because "softness".
* Apply it to radial distance, and to rel angle for stiff grip, and to aim for aimables.
* held objects are not too big and are enveloped so center-force can be applied.

v math thingy
  v stick it in Spring
  v unit test
- floppy grip
  - maintain dist
  - dist damping
  - yes try to aim target away from player if aimable
- stiff grip
  - maintain relative position/angle too (don't use player edge torque though)
- seeking
  - a simple large rayscan for holding
  -
- more ejecting
  - use a stiff grip during eject warmup, for aim (but don't mess up drop)
  - graphics indicator

- triggering
  - help object gets constant stream of triggerUp, triggerDown events

- Critters
  - Critters sleep by default.
  - On a global timer, mark things that are in world cells near player (but sightly beyond view) as "nearby" plus timestamp,
  - onPlayerNearby() can wake a sleeping spirit and start its timeout loop
  - Spirits



Player menu (do I even need this now? Maybe not important yet)
- menu class
  - takes a clickpad and a list of items
  - movable anchor to screen
  - actual menu items
    - back
    - change color
    - drop player

More refactoring...
- Inject collider info into baseScreen from pages, instead of using "createXXX" overrides?
- World API
  - move body/spirit query stuff from basescreens to World
  - give Editor access to World, to remove a lot of editor->screen->world call routing??


chain constraints
Simple distance between two body positions - no offset from center, because rotation would make that harder...
Or allow off-center chain points, but only for short chains that never bend more than 90 degrees. Then
approximate angular motion as linear motion and solve for constraint-violation time that way. Guaranteed to remain
in-bounds, I think.
- jack data
- jack rendering
- link data
- link rendering
- editor
  - jack hover indicators
  - link-creation button
    - link type determined by jack type
  - link hover indicators
  - link deletion

World.processNextEvent fix
- fix all world.processNextEvent calls to not reference a freed event! Also maybe reset on free, not on alloc.


Bézier curves for sparks would be cool

Bendy lines?
Today models have vertex groups, up to two of them. Expand that to about 10, in an array format.



EDITOR 3

Zoom
- two-touch pinch/unpinch?
- mouse onscroll, like Vorp
- keys, maybe "[" and "]" or "," and "."
- Touching the zoom indicator buttons zooms to that level Maybe four: close, medium, wide, far.

Layers
Mode switch between Terrain, Objects, and (soon) Snap
Things in common:
* add/fill and remove/dig
* position/clear pin (soon)
* menu for add
* cursor helps preview stuff
This'll simplify keyboard and touch button logiclayout

Pin
One button will position pin at the cursor, or clear it if you're close enough to it. So if you're not close,
double-tap will end up clearing it. The presence and position of the pin changes many actions you do,
like a shift key with coordinates.
Dig-line, fill-line, add (orientation), scale scalable objects, spin unscalable objects about a fixed point...
Later it can be used for creating links and chains

Snap
All objects can have snap-points that snap the cursor to them when close enough.
- Give all objects a snap-point in their centers, to make dragging w/o rotation easy.
- make snap points snap things, duh.
Snappers are world objects that only appear when editing, that are studded with snap points.
Since snappers often overlap with objects (no collisions!) there needs to be a way to separate grab-targets...
* separate "grab" for snappers and other objects?
* move overlapping points apart when the cursor is near more than one? Maybe with Z-shear effect?
  * I don't like targets that move when you hover.
  * so maybe make a deliberate z-shear
- snap menu
  - maybe a triangle of square grids, from 1x1 to 1x9 to 9x9
  - also some circles with a stud in the middle and studs at the edge: 3, 5, 6 (hex grid?!), 7, 9, 12, 16, 32, 64?
  - maybe shorter arcs too
- top-level switch to toggle snapping on/off? I can see it getting annoying when you're doing free-form dragging.

Undo/Redo UX polish
v less crappy undo/redo button models
  x RigidModelLineDrawer
- save during a long change edit-gesture, like a digging drag, throttled by wall-time
- a bunch of stuff with view rectangles? Save it for when it's zoomable?



Batch rendering?
- Add vector versions of existing uniforms?
  -
Add "instanceNum" attrib to each vec?
... or extend "group" mechanism to support an array of model matrixes, and make a sweet polyline model with tons of groups??


Test max RAF rate during pauses, to set max ms-before-bailing.
* This is to defend against devices that don't operate at 60 FPS.
* I can't base it on in-game performance because if code takes too long to do work, it can't tell that it should
  have used a shorter cutoff. It just looks like the correct cutoff is one frame longer than it really is.

Polygons (this will wreck my world so do at own risk)
- physics
  - represent segment
  - primitive static segment vs circle collision detection
  - represent concave polygon as complex body, lists of primitives with postion offsets
    - segments
    - corners
  - util for collapsing corners and segments of multiple convex into concave polys.
    - cull in-pointing corners
    - cull inner segments
- rendering
  - divide concave poly into convex chunks
- editing - polygrid, each tile containing N convex polys
  - bisect op
  - cut corner op
  - add - leave no overlap
  - subtract - use cut and bisect


