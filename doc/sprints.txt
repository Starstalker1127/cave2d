2014-03-22
Resizing Canvas - just for one page.
v window measurement
v resize event listener
v canvas resizer
v put it in cave2d site

2014-04-28
Viewport and camera
v viewport has resize callback
v camera has pan, rot, and zoom
v works w test page


2014-05-08
Some nodes...
line node {
  series:[{t, pa, pb}, {t, pa, pb}...] sorted by t.
  startTime: t, or default to series[0].t
  endTime: t or infinity or series
}
translate node {
  series:[{t, pos}+] sorted by t.
  startTime: t, or default to series[0].t
  endTime: t or infinity
}
rotate node {
  series:[{t, rads}+] sorted by t.
  startTime: t, or default to series[0].t
  endTime: t or infinity
}
scale node {
  series:[{t, scale}+] sorted by t.
  startTime: t, or default to series[0].t
  endTime: t or infinity
}
// zomg the power of the series! Slomo, fastmo, reverse, scratch...!
delay node {
  series:[{t, delay}+] sorted by t
  startTime: t, or default to series[0].t
  endTime: t or infinity
}

2014-07
Basic Nodes
v line
  v one whirly hexagon
v translate
  v two moving whirly hexagons
    v tree traversal is automatic
    v basenode works as collection of subnodes
    v subgraph reuse works
v rotate
  v wiggly arms demo
v scale
  v other wiggly arms demo
v delay
  v shifty clock demo

DONE Milestone: Animated canvas thingy with variable speed time
========================================================================

2014-07-13
QuadTree and demo
v basic quad
v color with a shape (circle?)
v demo

Quadtree Grid
v edit like a quadtree
v serialize & deserialize
  v port bit manipluation
    v bitqueue
      v test
    v base64
  v quadtree s27n
    v ser
    v des
    v test
  v quadtreegrid s27n
    v ser
    v des
    v test


Editor Improvements
v Only redraw a dirty rect, or a list of affected quadrants.
v Mouse support
v Hall Pills: Affect the space between to events connected by dragging - update HallPainter,
and capture drags in event handling code.
  v dist from segment to point
  v drag tracking
  v proper hall pill painter

v Simple AABB rect object, like vec2d.

#### MILESTONE: Nice editable mazes, for mouse and touch
#### COMPLETE
What I learned:
* Quadtrees are cute but kind of a pain in the A too because they're not a simple grid.
* The system of void/wall/floor drawing is good. Keep it.
* Multi-gesture+mouse drawing-based map editing is really great, and I want to keep that.
* Turns out the Vorp code isn't as easy to reuse and adapt as I'd hoped.

Now it's time to rewrite the physics & gameplay engine, to be easier to understand and use.

Body
* Used by the internal collider to enqueue future events.
* Used by the internal default collision response code.
* Used by Sprites, through a careful API which handles pathId invalidation.
v Identity
  v id
  v spiritId or 0
v Path
  v pathId - changes whenever a trajectory field changes. 0 means it's invalid.
  v pathStartTime - just for calculating position as func of time
  v pathStartPos
  v vel
  v pathEndTime - for not looking ahead too far, if acceleration is scheduled.
v Shape (affects path)
  v shapeType (circle or rect)
  v rad (for circles)
  v radX (for rects)
  v radY (for rects)
v hitGroup (changing invalidates path. Probably changes infrequently.)
v mass
v elasticity
v getPosAtTime(t, out)
v getBoundingRect(t, out)
v set pos & vel
v alloc & free
I'm trying to be uncompromising: Don't create an object field pointing to a parent. Pass the parent in to methods.

Spirit baseclass
A spirit subclass can have lots of custom logic, scheduling, sensing, body-manipulation, etc.
v id
v world event handlers: start, timeout, hit
x bodyIds? Or just methods that take lists of bodies, and single bodies?

World (but not all its collider aspects)
v spirits {id: spirit}
v bodies {id: body}
v pathIdToBody {id: body}
v world's spirit-facing API:
  v addBody
  v removeBody
  v getBody
  x setTimeout
  x cancelTimeout
  (later: rayscans)
v getBodyByPathId purges obsolete pathId keys

How will path invalidations get buffered up for when the World needs to move time forward?
Easy way is to make each Body hold World, like a parent pointer. I tried to avoid it but maybe I can't.
It's cleaner to include the PathInvalidator in each Body, and the World, like Vorp does. Sigh, OK.

Start Test 8 - A World
v Simple renderer
  v draw bodies
  v viewport surrounds everything automatically
    v do it body-by-body for now, until cells exist

Event Queue, and Time.
The world has a big queue of events, in time order. Future events are predictions that may be invalidated by earlier
events.
The trick here is to separate the runtime order in which events are added, and the game-time order in which they
are dequeued and processed.
v init events: body entering cells
v init events: body exiting cells

DONE 2014-10-05
v add-to-cells
  v initial addBody add-to-cells
  v add-to-cell
    v add to group layer
    v add collision events
      v actual time-to-collision checking
        v brects
        v rect to rect (same as brects?)
        v circ to circ
        v circ to rect
        x unit test?
        x fix double-hit across cells? or no? Only happens on initial add, right?

Process the queue
v Process enter events
  v add to cells
  v create next entry event
v Process exit events
  v add next one
v Process collisions
  v default collision response
    v calc accel
      v circle/circle
      v circle/rect
      v rect/rect
    v alter paths
  v spirit callbacks
v Process collision v2
  v World only detects
  v Game uses resolver, or whatever, to handle hit events.

Timeouts:
v timeout event: spirit scheduled to do something, like accelerate, sense, react to something that happened earlier, etc.
  Scheduling things to happen at floating-point times is the key to making reflex-time important for NPCs

Cell collider
v sparse grid of cells
v cell
  v array mapping hitgroup index to list of pathIds
v map from bodyId to body
v map from pathId to body. (If a body has a different pathId, then the index one is invalid)
v body creation causes...
  v overlap tests & immediate hit events w bodies in cells
  v time-to-hit tests, events (multiple)
  v enter-cells test, event (zero or one) - bounding rect's leading point crosses a cell x or y line
  v exit-cells test, event (zero or one) - bounding rect's trailing point crosses a cell x or y line
v enter-cell event causes
  x overlap tests (maybe not?)
  v time-to-hit tests
  v enter-cells test for next edge or axis
v exit-cell test removes bodyId from departed cells

v Test 9: Bodies animated by a spirit, using timeouts

#### MILESTONE: fully functional physics for aarects and circles
#### STATUS: DONE 2014-10-12

DONE 2014-10-19
Rayscan
API?
world.rayscan(hitGroup, startPos, endOffset, shape, rad, rectRad)
returns a WorldEvent? No. Separate RayScanResult thingy, allocated by client.
v world.rayscan(request, result);
v RayscanRequest has that stuff: hitGroup, startPos, endOffset, shape, and one of rad, or rectRad.
v RayscanResult: is like a WorldEvent a little


Controls
The idea is abstract away the following from the game logic:
1) Device type: keyboard, mouse, trackpad, touchscreen, or combo.
2) Sample rates and game framerates. Use milliseconds for everything.
The actual JS events happen between frames.
They could be buffered by the event-handler code, and then consumed on-demand during the event loop.
But they should also ping a callback, because it's possible to do really on-demand between-frame
physics updates, by advancing the simulation up to the time of the event, and then applying the effect.
When the animation-frame hits, it advances the sim the rest of the way, then draws, I guess. Hm.
I'm assuming that I have 16ms to simulate and draw, after each 60Hz RAF event, before we start skipping frames.

Example: A player taps the "x" key: down/up between frames. It should still count, so final state isn't enough.
But if a player is holding a button down, that needs to persist too.
So the controller is stateful, consumes events, and produces state and more events.

Basic use cases:
1) Button: queue every down and up, with timestamp, plus current state and start timestamp (last event basically).
2) Stick: current vector, w magnitude from 0 to 1. Plus down/up state w timestamp, queue, last.
  * kbd params: the keys for up/dn/rt/lt
  * touch params: drag radius, boundary function
  * pointer-lock params: can it be done? Does it still give down/up?
API considerations
Write games for multiple input types, joining multiple input classes into one abstract input.

Example 1: twinstick shooter supporting keyboard, touch, and mouselock/keyboard combo.
* Define movement keys and touch-zone, and combine them into one Stick for movement.
* Define firing keys, touch-zone, and mouselock, and combine then onto one Stick for firing.
So all sticks types, like KeyStick, TouchStick, and MouseLockStick, will have different configuration options
(keys, touch-zones, radius, etc) but they'll all produce the same output. Then a PolyStick can accept many
sticks as imput, combine them, and produce the same kind of stick output. One could also create a BackwardsStick,
a SpinningStick, a RandomStick, DelayStick, other handicaps, both as filters and as additions.
How are sticks combined? Add inputs, and clip (not scale) to unit circle.

Example 2: Vorp's grab and drop buttons.
* Keyboard: Z and X
* Touch: define two overlapping rects or circles or whatevs - functions of touch points I guess?
* Mouselock: map left and right mouse buttons. (new idea there!)
How are buttons combined? On every child up/down, the parent is down if any child is down.

2014-11
Sticks
v Stick base class
v KeyStick
v TouchStick
v MultiStick - adds input sticks and clips the result
  v demo KeyStick and TouchStick on the same page
  v demo twin-stick shooter - multiple sticks of each type
v PointerLockStick

v Leaked cells when removing body?
  v test
  v fix

2014-11
Canvas layers
Examples:
* Background with map, drawn once, redrawn only in dirtyrect chunks when map changes.
  May be written to with marks and stains and stuff as the action wears on.
  What's special is that the canvas holds the entire background, and the canvas element itself moves.
  Is that even wise? Maybe I should use a tile system, where the tiles are canvases that get rendered and recycled
  as needed. But lets just get a single giant tile in there for now.
* Foreground with all the action, fully redrawn every turn. The canvas itself does not move.
* Debug overlay layer that can be turned on and off. Also probably shouldn't move, but maaaybe.
Tasks:
v Make it work
x Make a reasonable API

2014-11 to 2014-12
WebGL renderer
v Static level background
  v JS to load GL mem (see test15) using world coords
  v JS to set uniforms to translate world-to-view. Model-to-world is identity, since model == world for background.
v Dynamic foreground objects, at all
  v JS to load model data into GL mem using model coords.
  v JS to set uniforms for model-to-world, world-to-view, plus color or other uniforms
v circles


2014-12-26 to...
FRACAS II
Remember my first JS game ever, http://plexode.com/fracas ?
Time for that remake, featuring the same ascii text level format, roughly:
.: floor
#: wall
=: (new!) destructible wall
g: gnome
G: gnome generator
$: gold
+: health
@: player start
>: exit

Gnomes will wander, avoiding obstacles, until they see the player. Then they attack!
Generators do a rayscan before generating, to avoid overlapping.
Treasure and health won't occupy the whole floorspace. Monsters can go over them...
But to make up for it I'll add destructable walls the player can blast through.

v simple async dependency loading solution
v load maps
v init world from maps
v init GL program with shaders
v init bg buffers
v rayscans for gnomes
v group-based collision detection
v combat rules
  v gnome death
  v player damage and death - reload next level for now.
  x player health indicator - hearts at the top of the screen? Or facial expression? (Face. Design, impl. below)
v exit to next level
  v Exit spirit
  v basic rendering
  v bullets don't bounce off of it
v generators
  v spirit and renderer
  v gnome creation
  v destructible
  v rayscan
v new colors
  v exits
  v generators
v DEATH BRUSH(ing)
v destructible walls
  v spirit
  v renderer
  v collision rules
v gold
  v spirit
  v renderer
  v collision rules
v health
  v spirit
  v renderer
  v player health indicator, no matter how lame. Try MIDI-maze smiley-face. Or color, or both.
  v player's health carries over from level to level
  v at full health, healths act as a powerup that fades with time

WebGL text
I've got a design for a 3D typeface, which I call "sticks". Everything is made of sticks,
which are stretched cubes.
A character can be expressed as a list of line segments, where each is x0, y0, x1, y1.
To make a 3D stick, start with a unit cube, stretch it to the right length, rotate it,
and translate it into position.

2015-01-19
Matrix44
v toIdentity
v toScaleOp
v toTranslateOp
v toRotation[XYZ]Op
v multiply
v unit testing

2015-01-19
Vec4
v transform(matrix44)
v unit tested a we bit in Matrix44 tests.

RigidModel
v addVertex(vertex) returns index
  v Vertex
  v vertexes
v addTriangle(index0, index1, index2) (counter-clockwise)
  v triangles
v addRigidModel(that) - adds all vertexes and triangles (re-indexed of course)
v transformPositions(matrix) - duh
v createVertexBuffer() generates a new VertexBuffer object, to be used for drawing.
  In interleaved pos3f/color4b format. Or I can do pos4f/color4f if super lazy

VertexBuffer
Backed by a GL buffer, it wraps that crap.
v prepareToDraw() in preparation to draw. We might want to do this once, and then
  draw the same buffer several times with different uniforms. This binds the buffer(s)
  and sets the attribute(s).
v draw() draws to the GL. You'd better have called bind() first!

2015-01-25

Test 17+18: RigidModel, ModelStamp, and Cuboid
v get a ModelStamp to draw one triangle.
v rotate the view matrix
v draw a few triangles with rotated model matrixes
v replace the triangles with cuboids

2015-01-31

Sticks Typeface
v Draw a bunch of F's.
  2015-02-02
v Draw a bunch of A's.
  v Fix bugs when composing RigidModels. Could be anywhere!
v Generalize the font-making code.
v Make a character generator.
v Support lots of the ASCII chars.
  v A-Z
  v 0-9
  v some punctuation

More model tools
v RigitModel.createTetrahedron()
v RigidModel.prototype.quadrupleTriangles()
v RigidModel.prototype.sphereize(center, radius)
v RigidModel.createOctahedtron()

2015-02-09

AnimatedValue
v setValueAtTime(value, startTime)
v linearRampToValueAtTime(value, endTime) // v(t) = V0 + (V1 - V0) * ((t - T0) / (T1 - T0))
v cancelScheduledValues(startTime)
v unit test
2015-02-23

v Renderer: interface to the GL program and shaders
  v can hold one model: callers can set a model and stamp it all over. Next caller sets another model, uniforms.
  v demo w test22

v main.js controller I
  v load levels
  v load GL program
  v create renderer
    v many things
    v change view uniforms to a single mat44
  v construct TitleScreen w all deps
  v start() TitleScreen

v Printer class
  v takes a typeface and a renderer
  v printLine(startMatrix, nextCharMatrix, text)
  x printMultiLine(startMatrix, nextCharMatrix, nextLineMatrix, text)
  v demo w test 23
    x more glyphs: ()[]{}<>'"/\= etc
    x force to uppercase or add fake lowercase glyphs - smallcaps?

Test 24: Pointer
done 2015-04-28
v Matrix44.inverse(mat44);
v Create a world with things in it
v Create WindowToClipspace matrix
x WindowToWorld
v invert vector in two stages, because the combined screen-to-clip and clip-to-world is not invertable!
x Draw cursor at the place where the user touches/clicks
v MonoPointer - mouse/touch pollable single pointer support
v Highlight stuff near the pointer

Test 25: Basic Sounds
done 2015-05-03
v World with things
v SoundSystem
v One-shot
v Bang objects into each other to hear their noises
v iOS sound-in-event Web Audio unlock

Test 26: Touch Tone
v MultiPointer, which tracks old and new pointer-down positions (no hover. touch-centric)
  v setViewMatrix
  v getWorldPointers
  v getOldWorldPointers
v Since pointers teleport, I need overlap tests
  v circle vs circle
  v circle vs rect
  v rect vs rect
v ButtonSpirit
  v has rectangular body
  v has reference to old and new pointer world coords
  v helps draw itself
    v has a ModelStamp
    v and a draw() method
  v makes a noise
  v draw() cares about spirit.draw()
    v Draw the button using the model.
    v Make noise only on touch-down (new && !old)
    v Stereo positioning

Test 27: Sound Board
Mostly for testing sounds, but also testing text menus.
v Text button
  v LabelMaker takes a string and makes a model, which can make a stamp
  v ButtonSpirit takes a stamp for drawing purposes
  v Size the body to the stamp, or the model
v Different for each button
  v noises:
    v pew!
    v meep
    v kaboom!
    v tap
    v bong
v Fix multipointer up/down timing to catch between-frame up/down events.
  * Repro is to tap trackpad. The down/up can happen between frames,
    so the polling clients miss it. But I like polling clients, and
    hate listener callbacks.
  * So keep a circular buffer of log of events, timestamped. ID, type (down/move/up/cancel?), x, y.
  * Continue to maintain a double-buffer of old state and new state.
  * Write clearEventLog() method to use at the end of each frame that flips the
    old/new state buffers, and advances the circular buffer pointer so it's empty.
  * If anyone needs more than one frame, they can buffer it themselves I
    think. So 10 fingers x 10 events/frame ought should be enough.
  Implement
  v PointerEvent
    v timestamp, pointerId, type, coords
    v createFromMouseEvent
    v createFromTouchEvent
    v pooling
  v MultiPointer has pointerEventLog
    v Circular buffer of PointerEvent
    v enqueue
    v size
    v getFromTail
    v clear (dequeues and frees all)
  v Multipointer continues to maintain head and tail snapshots
  v Multipointer.reset() clears queue and resets shapshots to empty.
v Fix ButtonSpirit to find between-frame down-->up transitions
  v figure out insane touch bug. LOL it was === vs == for touch IDs,
    some of which were coerced into Strings by being object keys.

Test 28: Multiple Screens
Make a main menu world and a playing world, and switch between them with a screen-controller.
v Base screen interface
  v setScreenVisibility(0-1) // default 0
  v setScreenListening(true/false) // default false
  v drawScreen() // might lazily create stuff, synchronously
  v destroyScreen() // prepare to be garbage-collected, by cleaning out Web Audio and WebGL stuff
    Main value is to unload the GL-cached models for level maps, to free GL memory
v Screen Controller
  v async loads screen deps
    v renderer
  v creates screen objects
  v handle RAF loop
  v calls initial screen methods:
    v setScreenVisibility(0-1)
    v setScreenListening(true)
    v drawScreen()
  v Handle transitions between screens
v TitleScreen
  v Get anything working :-D
  v Title
  v Override base screen jazz
  v Play button
v PauseScreen
  v resume
v PlayScreen
  v pause
  v quit
  x some fun sprites & game controls? nah.
v Give buttons boxy backgrounds
v extract common stuff from screens

Test 29: Full Screen & Pointer Lock
Some of these APIs need to be called from an event handler. But I've separated my buttons from
the actual events. I may have to partially undo that, or at least work alongside it...
I need to detect when a button is clicked or entered or whatever. Bah.
v Add proper listeners for anything that wants to execute in a real event callstack.
v fullscreen button
  v needs to trigger mode in event handler?
  v in title screen
  v in paused screen
v space to play, pause, and resume.
v pointerlock on in play screen, off otherwise.
  v on when Play or Resume is clicked
  v on when the play page is mouse-clicked, since the user can escape and then return. A little janky but not too bad.
  v off when leaving the play page.
v Don't listen to mouseclick on buttons when pointerlocked. Hmmm. Fix in MultiPointer.
v Unlisten correctly
v Pull common code up to new BaseScreen class.

Test 30: Trackball control
v Trackball (base)
v MouseTrackball
v TouchTrackball
v MultiTrackball
v Tune behavior
  v Touch to engage friction, release to float?
  v Frame-by-frame coord change dictates target velocity
  v Apply accel to try to reach target velocity
  v Max drive accel stat matters
v props
  v walls
  v boulders
v Change buttons to not be rubbable.
v fit to screen better
v fix paused-screen animation. less z.
v fix interpenetration!
v fix quit. reset playing world.
v sound
  v collisions
  v fix volume, test on ff, chrome, ipad, nexus
done 2015-06-28
SERIOUSLY, LEAVE IT ALONE

Physics revisited a little?
v Collision-dist fudge-factor
v problem where calculating far into the future without rendering causes missed collisions
  v repro with basic sound test, time per frame cranked way up.
  v fix it

Small Game 1
- Title screen same as always, but more 2D
- Ditto for pause screen
- Trackball
- Autofire in direection of movement
- Second finger locks firing direction
- Smallish auto-generated arenas, 2x2 screens roughly
- Enemies all appear immediately, like robotron and Nuclear Throne?
-

Sound II
Do some kinda sound-object pooling. It's an allocation free-for-all right now. It falls apart on iOS.
Some hypotheses to check:
- Number of simultaneous continuous oscillators has per-browser/device limit. Failure mode is silence.
- Synth failure (silence) can be detected with AnalyserNode.getFloatTimeDomainData()
- Number of simultaneous continuous nodes (not just oscillators) is limited per bzr/dev.
- Short-lived GC-able node count is even more limited.
- Pooling is effective: Hanging on to nodes in JS and re-using them results in higher node limit.

- Measure performance of browsers using current frequent-allocation technique
  - Stress-test by comparing approximate expected output to actual output
    - vanilla HTML page with buttons and dashboard. Small canvas visualizer maybe. No WebGL.
    - create a "expected output" node that analyzes output sample amplitude, looking for stretches of zero
    - allocate N node sub-graphs with short durations and see how output varies with N.
      - separate non-overlapping pulses
        - bare oscillators
        - position + gain + oscillators
      - longer oscillators that overlap


- long-lasting Singer classes
  - position
  - gain, mute
  - start, stop, cancel (one-shots probably won't use stop)
  - pause, resume (for when the game itself pauses and resumes)
  - misc params depeding on object

Unload stamps from GL
Deleting a buffer is easy: gl.deleteBuffer(WebGLBuffer? buffer)
- generate big maze stamp
- load in finitely until it breaks.
- load and unload infinitely - should be fine.


Use RigidModel and ModelStamp in Fracas2
- replace existing "addRect" and "addCircle" RigidModel-generating things.
- build entire background of squares out of this
- build the circular model out of this.

- spaces vs. walls
  - Render non-walls with triangles, and default the canvas to wall-color
  - Cull walls that are not touching other tile types. Don't give them bodies.
  - Change level format to be floor-based, not wall-based. Compute wall bodies.

Special Effects
- explosions & sound effects I
  - gnome destroyed
  - generator destroyed
  - player damage
  - wall bump
  - wall destroyed
  - gold collected
  - health collected
  - exit level?
  - player destroyed?

- graphics models
  - bullets --> arrows
    - big signage arrow pointed in direction of flight, like Dandy
    - arrows stop and blink out when they hit a wall (file under explosion)
  - player
    - mouth
    - eyes
    - arms and legs?
  - gnomes
    - eyes
    - mouth
    - arms & legs?
    - hat! Maybe like http://plexode.com/eval3/#s=aekVQXANJVQMbAx10AYMeFBERAYIeF5sBSkUePQNEQk+mHx0QdB89TwMNA0uRk3APdqUDSE9QTkZUphyxsWABcQkKAVyxREQPR0pNTTRVWk1GvARHRUXEz9FDRkhKTzFCVUnLxU/QD05QV0Y1UAkOEg0B+QrueBNc71e76fgSfziB8BJ8DBMFCIPDUId7RhcNfL7iESf7RIhNKBUIzpdbthLTasligPKhVKZQJhGlJeYxPZDkIRTIrLZsmajWbDabjfcADjgPcjmdDqdkTeDyej2fASB8PiNNisCqL5qkZq8KrL3CL7B0Qg9Gi1RqcPr1oglcAMatlgBNiANqr0ekEipcpeEnJt9aMsl0wmU0ZBGLTCnbOlV/a7ZbamAibCLhlVIc8jplGnBEfEQC1j0MZB4RDMZ0emCNmhN5kObwLSn2ywcvmNezNKklez10B+ifmkuGm1Fw1Sb1sq1973lGv+1lu3wyqmoBX8hxkJ3Wxr2PoGSAbdb+XeG+utkB4T4MQCYYjPpCr7NIxFQMiAV720r22wsTTN1TIPIVm8TxmDlZpfFeU9F34aUFFyQxUYOcSEFGf1uDugAxwBEk6naY5PmQUFkxHJt5Tjghu2cQmDFaWpwXpBmEUNegEwPBiNFpVSMUQjNRnMd1z37hd0n+hphwBTgTogPB3IKUaLlhV1RhSFYQhFFM6hKEQJBWFNUFhcBpVVBdpQXfyRoZduKpCQl5wPmZxHGe1Y30Co+3KPCGHUhySxUAkVTMY2exCPRskWDgozrAEHnEBIFlGS0qRUE06kxVWejRS4VaXAkaRUOegQLRCaABBAAQTPxxH5O6S2yFMwhVFCsW1oaa0qomixJo2j6RQkVCoNpUp5V6kxPpWnqZV6nKeqCohVqScQWMyqKqA6rETq+zKyrRuCxht1jaEiTYpUmbkqlJdJUQmVpYloVZcl6YI1eppXyo9pY/QlbW/exVpFYSuLhMi46AoKBqFoeNKKEU66OWWv0qFSt2yseyRVTFw1xUazcZp+oRPoG1apRO46wt2tX8xV/LCTFGF2saWrIpbH8bwBCceTGz8itFUwRBMCgQ0E7sntxLLeyjSMqkh1Sor0SBGEMSgJKYqCqANV69KgD9RFUJBQE/GRZFUCQIBMRQIROHC+MBMRZPsWj7Ek+xXPvCGNAEAUAQLDaMxBVDu3qe5qiMRq9ZNlWX4Ngss4LezRxfNdv3FE+MA/OsgtC0ozAuj+W5BK8uAkFl16XoDK6Cf8j4/BusLHek3TlKd6diuN6Yli+ggNzuwh2H+gPCsdLwNNBhFWvQJGIZAKGWp12Js7ttMECSaXWkF19ndwQq0sfTpjpZ5Bn2nHAGgvSL/1CgJy2PY+L5F1FXQ0TAgCCzAMThUJIAwSBH9woDrf2BJ/4VQlwCAGF4AAA=
    - hat could fly off during explosion...

- shader effects
  - powerup glow or vertex freakout?
  - tunnel vision during slo-mo?
- control tweaks
  - single fire button, laser scope?

Bugs
- Simultaneous-corner-bounce interpenetration.
  - Repro unit test
  - Fix

Sparks
Splashes and explosions can use a circle, with a time uniform and a dist-from-center varying,
and kind of a fancy frag shader.
Vertex shaders could be lots of fun, for glitching, warping, prismo-style beam-in for isometrics,
robotron-style stretch-splosions.
v Nice simple explosion shader with time param.
- JS for throw-away graphics effects.
  - Separate SparkEngine class for one-shot graphics (and later audio)
  - Recycles records used to render to GL based on time param.
  - Garbage collects expired rows.
- Make hitting a wall splash a little wall color.
- Make bullet hits explode enemies (which makes them re-appear far away from the player)
- Make firing a bullet spash a little bullet color.

Slider
basically a stick where I project the value onto a line, and a renderer

Editor Skeleton
- nav/wall/air mode switch
v pointer-based grid editing
  v circles at each event
  v touch
  v continuity between event points on drag
  v mouse
- drag-based panning

Make a maze and play it.
Terrain URL
v port stuff
  v url
  v lempelziv
    v map
  v squisher
- button saves sharing URL to textarea
- button dismisses textarea
- onload parse URL

Game UI Nav
- list of levels
- start player with data D
- start editor with data D
