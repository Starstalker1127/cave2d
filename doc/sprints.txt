2015-10-17
Mutable Terrain with BitGrid
v Nigh-infinite grid of cells
v drawPill
v getDirtyCells
v clearDirtyCells
v compress rects

2015-10-25
Game logic for mutable, explorable, yet limited terrain, v1.
All bodies will always be in memory, and all models will be in GL, but we'll only draw visible models.
v Load all dirty wall cells after level creation, and all adjacent uniform wall cells, so we get no gaps adjacent to
  dirty cells.
  v get x,y from cellId
v push-scroll camera - drag it so focal object (player body for now) is never more than X world dist away from camera.
v Draw each cell separately
  v Have separate GL models for every non-uniform cell.
    v cell def
      v BitGrid cellId
      v body id array (or null if bodies weren't loaded)
      v private GL model handle, or null if none
  x Use one model for uniform cells.
  x Draw solid cells that have no bodies? Or draw floor cells only? Kinda digging the floor idea.
v Draw every cell on the screen, and a little more for shader-distortion padding, but no more.
v mutation: unload and reload any loaded cells that change, and doublecheck adjacent cells.
  v Make bullets destroy terrain, to test mutation
Done 2015-10-28

Fix WorldEvent memory leak? Is it infinite-duration paths clogging up the event queue?
Nope. The problems were:
1) Tiny world cells probably sucked
2) Double-adding bodies when terrain changed was certainly bad.
3) Walls were declared to collide with themselves, which was wrong.
4) The event queue had events with times of Infinity. Good luck with that.
Done 2015-10-28 but nearly 24 hours later.

Cursor
v Set up new test33, with game1's tech mostly.
v Cursor movement: Same as game1 player, sans body (probably) and without worrying about collisions.
v Camera control: Also same as game1 player. (Hm. Extract common logic?)
v Hover detection and indicator
  v Render a ring
    v sweet sweet alpha blending
  v different cursor styles for each mode.
  v world.getOverlaps(body) returns list of bodies
  v Hover mode - what are we pointing at?:
    v pinpoint center check
      v if objects overlap, pick the one with the smallest area
      v Centered on wall block: WALL mode
    x broader check, objects only
      x If there are any, take the one with the lowest distance-to-surface.
    v finally, FLOOR mode
v Tweak cursor acceleration curves until it feels right.
Even more done, 2015-11-03

Trigger
v test34, copy of test33
v multitrigger
  v regular trigger
  v keytrigger
  v touchtrigger
  v add invisible touch trigger and key trigger to multitrigger and see if it goes.
    v multi keys down/up separately and are ORed together
    v unlisten works
    v touch trigger blocks touch trackball from eventing. order of add? zone function sharing?
v Use trigger in test for terrain editing.
  v triggerDown with wall/floor indicator starts floor/wall initial position, draws first pill.
  v drawPill from old to new position, then let old=new.
  v triggerUp ends it
v draw touchscreen trigger
  v circle on viewport coords, not world coords.
  v only draw if there have been touch events in the last N seconds.
v Handle rotation/resize...
  v Track trigger pos as fraction of screen width/height, 0..1
  v Start at 0.9, 0.9
v Add trigger to game1 - no more auto-firing.
Done 2015-11-09

Drag objects
You can drag things by applying force to them in the world, or you can simply lift them out of the world and relocate
them.
v test35 exists
v Put objects in the tunnel parts.
v Dragging applies force to objects to accelerate them towards the cursor.
  v Remember model-coord grip point
  v adjust force to be proportional to object's mass.

v Fix BitGrid "sudden square" bug. Easy to repro with KeyTrackball in test35.

Arrow key trackball, for those poor bastards using IE or Safari.
v game1
v test35
v test34
v test33
v test30

test35 better ring indicator
* for indicators, explosions, and stuff.
v For each vertex, say which model transformation group it belongs to.
  v Vertex.group, defaults to 0
  v RigidModel can create double-ring
  v ModelStamp can prepare to draw using group attribute
  v Renderer support for group attribute
v test35
  v vertex shader
  v Second model mat44 in PlayScreen
  v use new doubleRingIndicator
    v Ring indicator should be of uniform pixel-width, regardless of scale or object size.
x retrofit all previous vertex-shaders paired with Renderer.

Splashes 1
v Splash, with pooling
v Splasher
  v add splash
  v draw splashes, with auto-remove
v Game1 splashes
  v player trail
  v enemy destruct
  v wall destruct

Save and Load from squished JSON, part I
v test36 nest, based on test35
  v no multiple screens
  v no spaceFn
v BitGrid to/from JSON
  x done already in worst way
  v rad optimized quadtree bits, around 1/3 the size.
  v unit test a little
v pause button
  v support multiple triggers
    v grip trigger is not so special
    v "listeners" arraySet
    v RoundTouchTrigger
  v pause is a trigger
    v draw it
    v subtract it from trackball startRegion
  v pause trigger down toggles pause state
    v stop rendering/clocking loop
    x turn sound down (no sound yet)
    v deactivate/reactivate pointerlock
      v event stack listeners for triggers
        v trigger up/down pubsub
        v multitrigger only fires on change
      v handler in test36 playscreen
v paused menu
  v regular DOM, over the canvas
  v fullscreen button
  v create nest for sharable hyperlink
v nest for reading URL onload
  v read level from URL
  v create new level
v Make bitGrid save/load work in test36
  v save
  v load
v Fix performance bug: world goes slow when touch trigger is up, sometimes, and fast when it's down?
  * World cells were 64 times too big by area, and there was an n^2 overlap check algorithm, so O(1000^2) per frame!
v World to/from JSON I
  v now
    v save
    v load
  v Bodies
    v save
      v Serialize body by body. Let the game client decide what to keep.
    v load
      v world.loadBody(body) accepts client ID
  v generalize schema util. "Jsonizer"
  v Spirits
    v each must declare a schema, to save/load anything beyond "id".
    v world.loadSpirit(spirit)
v Fix trigger-down bug. Why does it get stuck? Repro? Seems like mobile long-press --> right-click
v Fix balls going through walls on level start.
  v pad world brects. Maybe be a good iea regardless.
  v Ahah! Fix bug where distant wall bodies don't exist yet.
v World to/from JSON II: Timeouts
  v Add some robots with periodic timeouts.
    v Sound
      What's the simplest solution? Just a pile of sounds, with in-measure time...
      (And voice number? If the spirits allocate their own audio nodes, they don't get GCed. Optional.)
      [
        ['sound', in-measure time, voice?, vol, attack, sustain, decay, freq1, freq2, type],
        ['sound', in-measure time, voice?, vol, attack, sustain, decay, freq1, freq2, type],
        ...
      ]
      v Add measure timeout
        v remember timestamp
        v create all note timeouts
    v Movement
      v Accel on each sound, based on volume?
    v spashes
  v save/load Timeout events
v Splash 2.0
  v helpers
    v Pose class
      v pos, scale, rot
      v Jsoner
      v setToInterpolation(a, b, t)
    v Matrix44.prototype.setToPose(pose)
    v Vec4.prototype.setToInterpolation(a, b, t)
  v Splash class
    v two poses, times one or two model transformations
      v sp0, sp1
      v s2p0, s2p1 (for double-model stamp splashes which should be *awesome*)
    v color0, color1 - Vec4 instances
    v startTime, duration
    v type, stamp
    v pool
    v Jsoner
    ((( Jeez, that was a fat chunk of boilerplate )))
    v isVisible(time)
    v isExpired(time)
    v getModelMatrix(time, m44)
    v getModelMatrix2(time, m44)
    v getColor(time, v4)
  v Splasher: Collection of Spashes
    * Not like World+Body. Spashes are immutable. Fire and forget.
    v use new spash methods instead of function objects
    v addSplash(copyMe)
    v Jsoner
  v use in test36
  v use in game1
v World to/from JSON III: Splashes
  v save/load Splasher
v Editor state
  v cursor location (but not vel)
  v camera location

Test 37: Mouse and trigger enhancements
v code nest
v new Editor class limping along
v cursor follows mouse
v new "pan" trigger Mark I.
  v keeps cursor still in the world, and moves viewport
  v keyboard
  v mouse button
v fix touch cursor teleport. It was browser mouse emulation's fault.
v multiple action triggers
  v LayeredEventDistributor, so UI buttons can block world-canvas listeners, with each knowing about the other.
    v write it
    v use layer fake elements instead of canvas, in test37
      v grip
      v pan
      v pause
  v TriggerWidget class with icon stamp, key code, help text
    v renders icon in touch target
    v can listen to key, touch, mouse-down, and mouse-button
  v update pause toggle trigger
    v most stuff
    v clear val on resume
  v separate action triggers
    v grab
    v dig
    v fill
v Cool stamps for everybodyyyy!
  v grab: hand? Something less anthropomorphic? Should be reflected in grabber grx...
  v dig: digging into semicircle, caption
  v fill: filling in other half of semicircle, caption
  v pause: easy, two vertical rects on a button-y background.
v Debug & fix iPad trackball freeze. Repro is to tap a trigger and the world at the same time.
- Mouse fling
- mouse/keyboard users see keyboard guide for triggers
  - auto-gen using glyphs and trigger keynames

Test XX: Possession
Do this before add/delete, because this will be fuuunnnn.
- "enter" button in editor
- standard interface for playable spirits to implement
  - trackballs and sticks
  - onscreen triggers
  - callbacks
  - maybe control passage of time
- PlayScreen "play" mode separate from "edit" mode
- "exit" trigger to return to edit mode, at current location
- two playable spirits at least
  - Gnome Generator - generate
  - Gnome - move, lunge
  - Ninja - move, fire

Test XX: Editor Add and Delete
Add
- list of addable things
- show hotbar of addable things
- highlight current addable-thing
- trigger for adding current addable-thing at cursor
- splash
- sound
Delete
- qmode trigger
- instantly delete grabbed object if any
- otherwise go into grab-and-delete mode, which grabs and foreshadows deletion in, say, 500ms, gradually reducing timeout
  until it gets to 0ms? Releasing the trigger sets the timeout back to 500ms? Or am I overthinking?
- splash
- sound

Test XX: Undo and Redo
- retain last N JSON serializations in RAM or wherevs.
- Create new ones using one-token-bucket throttle right before mutations, w 1/sec(realtime) restore rate.
- Always save the just-after mutation camera and cursor pos, to bring the area into focus before undoing.
  Keep that as a separate kind of undo record, since it's so tiny and easy to restore.
- Button for creating an undo record just because time went by. Snapshot?

Orientation
- Bodies have orientation, moment of inertia, and angular velocity.
- create repeller turrets
- Cursor force can rotate bodies? Or cursor motion changes body orientation anyhow.

Very Optional: Always do something for editor triggers
- "Grab"
  - Always grabs best candidate up to full-screen distance.
    - Show rapidly-expanding scan-bubble?
  - If there's nothing, say that.
  - Show connection to grabbed thing
  - Strength is proportional to dist up to some limit, then is inversely proportinal? Or levels off?
- Terrain editors
  - Nice sparks when they change something.
  - Fizzle-sparks when they don't something.
  - If you hold still, you get an expanding effect bubble (up to some limit) to make big chambers n stuff easy?

YOU WIIINNN!
NOW WRITE A GAME YOU NUT!

Game1 Splashes II
- muzzle flash
  - player fire
  - enemy fire
- bounce
  - need point of contact!
- bullet destruct
- boulder bounce?

Zoomable?
- two-touch pinch/unpinch
- mouse onscroll, like Vorp
- keys, maybe "[" and "]" or "," and "."
- Touching the zoom indicator buttons zooms to that level Maybe four: close, medium, wide, far.

Lifting?
- If cursor distance is too great for too long (low-pass average dist?), "lift" the object
- Lifted objects are treated as though they are uniform density, normal MOI, with no physics or collisions.
- Can lifted objects be sensed with rayscans? No, they're transferred to the "none" group.
- Only one object can be lifted at a time (worry about multi-user in the distant future).
- Lifting ends when you release the object.
* When time is frozen (upcoming feature), all object-movement is by lifting, because there is no time for physics.
* When adding objects, they are lifted as they leave the menu.
