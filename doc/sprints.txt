Drop & Throw
v add kick+move = throw (implement as insta-kick)
v keep kick+stillness = drop

Make enemy development easier with some library biz.
And make inanimate objects a lot cheaper too!
v Wake and Sleep: hooks around timeouts, distance limits, friction, nearly-drawn, low-power, bump-wake, other wake
  v document Ant spirit efficiency biz
  v make it re-usable for spirit
    v plan it!
    v pull it up
  v use in spirits
    v ants
    v all inanimates
      v performance savings confirmed
    v fix editor to auto-wake anything that's dragged
    v fix anybody missing passive timeout loop
    v make body wake spirit when vel changes to non-zero
      v like change listener, add optional link to wakable spirit!!
        v undo maybeWake hacks
          v body itself
          v player tractor
          v editor
    v centipede is the trickiest! If any part is active then all parts should be active.
      v just make it not broken, using active loop
        v play
        v edit
      v going to sleep
        v awake head checks whole body.
          v each body part must have canSleep(), including head.
        v If all may rest then head tells them to all become inactive.
      v waking up
        v any inactive part that gets drawn or close to it signals all other parts to wake.
        v they all become active immediately so no more signals happen until next sleep
      v joining
        v an active centipede joining an inactive one causes it to become active

v Fix Chrome audio on laptops. https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio
  iOS touch hack, but for keyboard and mouse too?
  resume() if audio context is not running
  v game4
  v everywhere else!

Game 5 skeleton
v code nest
v remove unused spirits
v remove tractorbeam
  v from playerspirit
  v from controls
  v from splashes
  v from sounds

x Fix pointerlock everywhere.
  No I messed it up, and decided it wasn't worthwhile. It's good enough.

Player movement
x use mouse trackball
x limit max accel, like game2
x stun when hitting things hard, to prevent super-strong pushing. Lowers max accel more.
v floaty garbage because I love it!!

v base weapon responsibilities
  v setWielder(spiritId) to read team? Or just setTeam? Changing spirits releases trigger I guess
  v trigger API: down, up. Call down and then up immediately for one-time shot.
  v enforce rate-of-fire. Remember last fire time.
  v read owner body's pos, vel, angpos, angvel when firing
  v manage sounds, graphics, and actual fire effect such as creating projectiles
  x maybe draw, also based on owner body
  x setRateMultiplier(something around 1) nextFireTime = lastFireTime + fireDelay / rateMultiplier
  x expose properties like shotSpeed, shotSpread, shotRange, inaccuracy, splashRadius, for general aiming/firing alg.

v laser
  v player
  v ants

v fix rayscan-debugging graphics

Scanner: Vision and target-finding
* Scans for unobstructed targets
* Can lock on to targets to track them more aggressively
* Knows last time target was seen, pos, and velocity.
* This is all great but it is separate from movement
v always do random scan, track random scan separately from locked scan
v client decides what to lock to. Add setLockedSpiritId(id) and breakLock()
v if now - lastLockedTargetSeenTime > maxBrokenLockDuration then break lock
v if lock unbroken
  v if lock target overlaps lock-view cone
    v scan to see if view is unobstructed
      v center scan. if hit, done

v ant integration
  v ant fires when it sees target
  v ant locks target
  v ant turns towards locked target
  v ant follows target around corners
    v move to target last pos
    x rotate to target last velocity
    v start search fresh
  v ant loses interest if it cannot find target after a while
  x ant loses interest if it sees target destroyed

v searching
  * more efficient rayscanning when you're looking for rare bodies
  v Do clear scan for targets (only check for targets, not obstructions)
    v If there's a hit, do obstruction scan
v less randomness, more regular sweeping

v ClearPathScanner: class for finding a clear path
  v short scan for obstructions in desired motion direction
  v sweep-scan out to sides to find nearest unobstructed angle
  v state updates to include
    v unobstructed direction
    v isObstructed, and then
      v obstruction distance
      v obstruction path ID (to get body ID or spirit ID etc)
  v params:
    * scan rad = body rad
    * there is no scan period. This scanner is on-demand.
    v scan group
    v number of scans to the side to do (chages with stress so we do need it)
    v angle increments of the side scans
    v scan length
  v integrate into ant

x better combat
  v fire delay
    v apply to laser for sure
    v warm-up graphics for laser - throbbing red light?
  v fix laser warmup graphics to use regular circle model draw, not a ton of overlapping splashes, or make splashes count
  x melee weapon for player. What'll it be? Daggers? A Mace? No! A orbit-y rock thingy!
  x player use of melee weapons aided by target scanner
    x when the weapon is ready
      x activate TargetScanner that matches weapon range/shape
      x add TargetScanner onLock callback that the player can use to fire melee weapon?
    x player doesn't kill on contact
  x non-fatal hit:
    x stun
    x N-frame white flash (need to handle render-time biz like that, not in world-time)
    x force applies to attacker and defender, but mostly defender
  x fatal hit
    x changes spirit to corpse, with lots of knockback
    x corpse turns to dust easily


We're changing gears!
* New design: Dandy meets Gridrunner meets Legend of Dungeon.
* Players have inventory.
* Touch item to collect
* primary, secondary, drop
* select from inventory, like OS task switcher
* all items have drawable icon

ITEMS
Hm. Some tools, like clearPathScanner, are not items.
And some items, like a health powerup, are not tools.
Plus, some items might have multiple aspects, even multiple tool modes.
All Items will have an icon, and be renderable as world objects or inventory objects.
Some types of items:
* Collectible, stackable one-shots, like Dandy's health and bombs
* In-inventory, but not droppable, like "empty-handed" or Gungeon-like starter-weapon. Maybe "settings"?
* Consume-on-touch, like power-ups. Maybe these won't exist, but I do like classic power-ups.
* If a tool-like item has a cool-down, dropping and picking it up again must not reset the cool-down, so
  the inner Tool aspect should live with the Item, and not be re-created.

Item class
v icon
v short text
v properties
  v isDroppable()
  v getButtonCount() returns 0, 1, or 2 for now
  v getButtonIcon(index)
v interaction callbacks
  v onPickup()
  v onDrop()
  v onSelect()
  v onUnselect()
  v onButtonDown(index)
  v onButtonUp(index)

Inventory
v Data structure
  v fairly short ordered list (array) of items. 0th is the one the player is holding.
  v remove(index) shuffles the rest over. Usually remove(0) but thieves or special attacks could cause other drops
  v select(index) pulls that one up to 0 and shuffles affected items to the right
  v add(item, index) pushes things to the right

Collectible Item spirits
v BaseItemSpirit has common code and some params for concrete child classes
  v Concrete child classes have their own editor-friendly ids and things.
  v But because the classes are so small, cram them all into one file, items.js

x Renders with a bubble(?) and the item icon, but they're a single stamp? try it.
v Only players can interact with items for now. That'll be pretty action-game normal.
v Document how to add items, because there are a lot of steps.

Inventory Management UX part 1
v touch in-world item to add it to inventry position 0
  v ItemSpirits actually have Items in them
    v SlowShooter
    v MediumShooter
    v LaserWeapon
  v PlayerSpirit collision code knows what to do with Item collisions
    v PlayerSpirit has Inventory
    v Item is extracted
    v old selection us unselected
    v Spirit is destroyed
v button layout (create 'em all but hook them up to dummy down/up listeners)
  v primary action
  v secondary action
  v equip
  v drop
v drop item
  v button hookup
  v on down, start drop/throw targetting pseudomode
  v on up, actually drop/throw
  v creates appropriate Spirit
v player drops everything when they die
v replace PlayerSpirit.weapon with PlayerSpirit.item.tool

Item Simplification
Now there are about 3 layers per item: ItemSpirit, Item, Tool (which is also a Spirit)
But a single Spirit can do those jobs:
* be a thing in the world with your own body and rendering and friction etc
  * use world timeouts for friction
  * draw self
* remove your worldly body when entering inventory, and restore it when leaving, into the world
* be a selected item with tool capabilities
  * use the wielder's body and direction to decide where to fire from etc.
  * use timers to manage fire cool-down time etc
* be an unselected item in an Inventory list
  * do not draw when asked to (usually but this could be neat for special items)
  * continue to use world timeouts as you see fit, but probably be passive
---
There are two classes of Tools today:
1) Those that gets wrapped in Items and ItemSpirits
2) Those that do not, like ClearPathScanner and TargetScanner
They're all Spirits.
The latter two are not part of inventory and do not get dropped. They're always wielded.
Tools from (1) have three modes:
1.1) Wielded. This is the same as (2).
1.2) Wrapped in a spirit that has its own body, a free world object
1.3) In inventory, neither weilded nor a free world object.
---
All the serious code is in the "tools" dir. What else gets added by upper layers today?
"BaseItem" adds basically no value.
The ItemSpirits have a body-maker, and friction values and other super-simple things.
Let's use the tersely-named Tool classes and just add stuff like body, friction, modelId.
---
Double Collapse Item Simplification Refactor 2018!!!!
* Start from the tersely named Tool classes
v state
  v embodied
  v wielderId
v new API
  v wield(wielderId) // wielding auto-disembodies
  v unwield()
  v embody(pos, vel, ang, angVel) // embodying auto-unwields
  v disembody()
v Factory support for editor
v player pickup on touch
v player drop button drops current item
v player fire button works
v Delete all old Item and ItemSpirit classes
v port the remaining items
  v slow shooter
  v laser weapon
V get ant shooting to work again
v Active/Passive loop
  v Stop active/passive timeout loop if disembodied.
  v Start it when embodied.

v when player dies, throw inventory around semi-randomly
v tighten player angular rotation using dampened spring biz

v only show one action button for now
v hide inventory button too

v rework keyboard aiming

v rework controls so that quick taps are never lost.
  v ControlMap hold array of events
    v ControlEvent class
      v controlName (from map)
      v eventType: triggerDown (bool), stickTouched (bool), stickMove (vec)
      v boolean b
      v vec2d vec
  v as controls are added to map, map adds callback to controls
  v as js event handlers fire, controls enqueue events through controlmap callback
  x controlmap calls poll() on controls that support it, before giving controls to player
(Did this for triggers but not sticks. Good enough for now.)

v MineSpirit is different...
  v model: orb with eight? little spikes
  v Detonates on contact with anything, including player
    v adjust NEUTRAL
  v Produces a bunch of breaker bullets that are on a team
    x BreakerBulletSpirit // used regular bullet! So flexible.
  v Also detonates after a time. Does beep-beep-beep thing and blinks.
    v Set health to 1, and explode instantly if killed
    v But if gently touched, animate (spin?) and make a noise and set a timeout for boom-town.
  v make mines a proper level prop.

Data management idea
Scalable, Flexible, Simple: Pick Two
There's a lot of data that's embedded in code in various places.
A spirit has a MenuItemName string, SpiritType string, modelId, constructor, maybe item type and item constructor...
A lot of the code is just creating mappings from one thing to the other, which is basically database indexing
Maybe I should have an actual single JSON table, sort of like what I have for SpiritConfig but more declarative.
Or maybe each kind of thing should have a single KeyName that is used in lots of other tables:
spiritConfig
itemConfig?
iconModelId
v do it

==================================================================================================
2018-10-06 GAME DESIGN PIVOT
* player can only hold one item
* nobody picks up items unless they have room
* enemies can see and touch items, like players
* items only have one trigger
* items can be held by any enemy or container
* items have health and can be destroyed
* editor allows/requires stacking of enemies and items to make combos
* powerups can also be stacked on enemies and items in the editor?
* some enemies need empty-handed behavior, including item-seeking?
* player can do something when empty handed? Dash and punch?

v items join the world
  v items are in neutral hitgroup
    v remove item hitgroup
    v add "isItem()" or something so collectors can know they hit something collectible
  v items have health and can be destroyed
    v item explosion v1

v player can only hold one item
  v move drop button down
  v remove inventory button
  v player only picks up items when empty-handed
v remove action1 button

v enemies drop weapons when killed

Inventory Management UX part 2
- pickup effects
  v sound (from game 4)
  - splash (from game 4)
- voluntary player drop effects (not for death or disarm drops)
  v sound (from game 4)
  - splash?


- enemies can be assigned items from editor
  - need overlap detection when adding spirits to the world. Treat initial overlaps as collision?


- change to just two players on keyboard
  - mouse plus z x s
  - arrows plus . / ;

- Plasma gun
  - A0: fast ray that does splash damage on impact
  - A1: Slow plasma orb that floats without friction and does splash damage on impact
  - Shoot the plasma orb with anything plasma and it does a super plasma explosion
  - plasma ray
  - plasma orb
  - plasma shrapnel

- Make ad-hoc multi-group rayscans, so I don't need to waste a hit-group slot on groups that will never exist as items!

- hearing sense (for stealth elements of the game, if any)
  - SoundHistory class
    - backed by circular buffer
    - records are SoundEntry objs, pre-allocated to fill buffer
      - type
      - location
      - time
      - radius (simulates effect of volume)
    - lastSoundId starts at -1 and goes up by one each time
  - Hearing module for spirits
    - Spirits remember their own lastSoundId
    - when active but busy (target locked) they just set this.lastSoundId = soundHistory.lastSoundId
    - when just becoming active, also ignore prev sounds
    - when bored, process unprocessed ones in order
      - scoring: priority(type) - (age + distance / speed)
    - copy the fields for their last highest
    - each "bored" enemy
      - looks at ALL of them
        - decides on most attractive
        - copies the record to a local cache
      - tends towards sound until its score is 0 or until it is forgotton
  - if a target is seen, that clears the hearing record

- more enemy behaviors
  - smarter shooters try to keep some dist between selves and target
  - weapon dictates willingness to fire off-center
    - laser: dead-on only
    - shotgun: wider is better
  - lead target! Fire where the target is going

- Encapsulate behavior: WallAvoidance
  - uses ClearPathScanner
  - moving in a given direction
    - angular friction
    - linear friction
    - turn towards direction
    - and thrust (proportional to direction alignment + constant)
  - stress?
    - influencers
      - obstructions increase stress
      - clear path or target-visible clears stress
    - effects
      - 100% stress means lots of obstruction, maybe trapped. Subtle state change:
        - clear-path side-sweep scan count = 0
        - should also stop scanner I guess
        - randomly freak out instead since plans didn't work.
      - if unstressed, wanderers turn randomly
      - stress decreases thrust, to avoid ramming into walls


V .............. V
V                V
|   WELCOME TO   |
| THE LATER ZONE |
|                |
V .............. V


v weapons show up on carriers? Need special weapon graphics.
  * iconic grx for every weapon
  * show it outside of creature, in fire direction
  * show it inside weapon-pickup bubble

- weapons
  v slow shooter
  v medium shooter - machine-gunny
    v became rogue gun - medium, narrowish, very bouncy, low damage
  v laser 1.0 - long, straight, no bounce, frequent
  v telegraph laser fire
    v sparks
    v add delay
    - warm-up sound!
  - shotgun - short wide, a bit bouncy, infrequent
  - missile - seeking, avoids walls. Infrequent!
  - rocket - dumb, infrequent, explosive
  - saw - really short, constant, cuts through walls, pulls you forward a bit

- health framework
  - damage is floating point
  - health regenerates from fraction to whole number
  - healing jumps you up by exactly 1
This solves some problems:
1) Not all weapons have to be all-or-nothing damage, (though maybe that would still be a good forced simplification)
2) There can still be specific health-based modes
3) Folks aren't walking around within a hair's-breadth of dying.
4) Player is encouraged to concentrate attacks on an enemy long enough to drop it at least one full HP.
5) health can still be displayed with integer chunks

Fun props:
- bumper
- blipper
- portal
- repulsor cannon

- target-intercept behavior, like tractor beam
  - search for target
    - random search (or structured sweep?)
    - compare candidate target with current target if any.
  - target chosen
    - scan to target
    - move to intercept
      - choose along vector of where target is (0) and where intercept point is (1)
        - pull out intercept code for Avoidance
      - adjust vel to target vel or whatever
- target-avoidance
  - same as intercept, but adjust vel away from target vel?
- Also do diff between "hit target hard" and "come to rest at dist D from target", mjolnir-style

Impl concepts:
- desired distance
  - negative infinity: ram target hard
  - small negative number: gently push target
  - 0: rest just barely touching target
  - small positive num: follow target w/o touching
  - positive infinity: get away from the target!
- lead/follow
  - try to get to where target will be in f(positions and vels) time
    - zero:  dumbly go to where target is now.
    - positive but proportional to... dist?: lead the target
    - if negative, try to get to where target would have come from - go behind target

- selection
  - pseudomode button
    - reveals pack contents on screen (doesn't scroll yet but it could happen)
    - selection indicator movement
      - pointerlock stick left/right
      - fire/secondary buttons also work?
      - touch is more direct spacial model, where touchbar is below item icons
    - release pseudomode selects the indicated item
  - unselect old item
    - oldItem.onUnselect
  - select new one
    - inventory.select
    - item.onSelect
- animate item collection

multi-button tool support
- tools declare button count
- setButtonPressed(n, b) api takes button number as 1st param
- setAllButtonsPressed(b)
- only show correct number of action buttons
  - dim unused slots but leave circle or something

- level generation


